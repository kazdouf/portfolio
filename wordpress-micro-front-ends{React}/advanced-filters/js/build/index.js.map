{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEO,MAAMO,UAAU,GAAGC,KAAK,IAAI;AAE/B,QAAMC,cAAc,GAAGR,6CAAM,EAA7B;AACA,QAAM;AAAES,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBT,sEAAgB,EAA/C;AACA,QAAM;AAAEU,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkCV,sEAAgB,EAAxD;;AAEA,QAAMW,eAAe,GAAG,MAAM;AAC5BC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,yBAA1B,EAAqDC,OAArD,CAA6DC,IAAI,IAAI;AACnE,UAAIA,IAAI,CAACC,SAAL,CAAeC,QAAf,CAAwB,MAAxB,KAAmCF,IAAI,CAACG,aAAL,CAAmB,yBAAnB,EAA8CC,WAA9C,KAA8D,OAArG,EAA8GX,UAAU,CAAE;AAAEY,QAAAA,MAAM,EAAEL;AAAV,OAAF,CAAV;AAC/G,KAFD;AAGD,GAJD;;AAMA,QAAMM,eAAe,GAAGC,KAAK,IAAI;AAC/BhB,IAAAA,cAAc,CAACiB,OAAf,GAAyBD,KAAzB;AACAV,IAAAA,QAAQ,CAACC,gBAAT,CAA2B,yBAA3B,EAAqDC,OAArD,CAA6DU,QAAQ,IAAI;AAAEA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,GAAiC,SAAjC;AAA4C,KAAvH;AACAd,IAAAA,QAAQ,CAACM,aAAT,CAAwB,+CAA+CI,KAAK,GAAG,CAAG,2BAAlF,EAA8GG,KAA9G,CAAoHC,eAApH,GAAsI,MAAtI;AACD,GAJD;;AAMA,QAAMC,aAAa,GAAG,CAAEC,CAAF,EAAKN,KAAL,KAAgB;AAEpC,UAAMO,eAAe,GAAGD,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEA,aAAzF;AACA,UAAMC,WAAW,GAAGnB,QAAQ,CAACM,aAAT,CAAwB,+CAA+CZ,cAAc,CAACiB,OAAf,GAAyB,CAAG,GAAnG,CAApB;AACA,UAAMS,MAAM,GAAG;AACbC,MAAAA,YAAY,EAAEvB,aAAa,EADd;AAEbwB,MAAAA,OAAO,EAAEL,eAAe,CAACb,SAAhB,CAA0BC,QAA1B,CAAmC,kCAAnC,IAAyEY,eAAe,CAACX,aAAhB,CAA8B,gCAA9B,EAAgEC,WAAzI,GAAuJ,IAFnJ;AAGbgB,MAAAA,KAAK,EAAEJ,WAAW,CAACb,aAAZ,CAA2B,yBAA3B,EAAqDC,WAArD,KAAqE,OAArE,GAA+EY,WAAW,CAACb,aAAZ,CAA2B,gCAA3B,EAA4DC,WAA3I,GAAyJ,IAHnJ;AAIbiB,MAAAA,WAAW,EAAEP,eAAe,CAACb,SAAhB,CAA0BC,QAA1B,CAAmC,kCAAnC,IAAyEW,CAAC,CAACR,MAAF,CAASF,aAAT,CAAuB,gCAAvB,EAAyDC,WAAlI,GAAgJ,IAJhJ;AAKbkB,MAAAA,cAAc,EAAEf,KALH;AAMbgB,MAAAA,YAAY,EAAEhC,cAAc,CAACiB;AANhB,KAAf;;AASA,QAAIS,MAAM,CAACM,YAAP,KAAwBhB,KAA5B,EAAmC;AACjC,UAAIS,WAAW,CAACb,aAAZ,CAA2B,yBAA3B,EAAqDC,WAArD,IAAoE,OAApE,IAA+ES,CAAC,CAACR,MAAF,CAASF,aAAT,CAAwB,yBAAxB,EAAkDC,WAAlD,IAAiE,OAApJ,EACEoB,KAAK,CAAE,iDAAF,CAAL,CADF,KAEK9B,YAAY,CAAEuB,MAAF,CAAZ;AACN;;AAEDpB,IAAAA,QAAQ,CAACC,gBAAT,CAA2B,yBAA3B,EAAqDC,OAArD,CAA6DU,QAAQ,IAAI;AAAEA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,GAAiC,SAAjC;AAA4C,KAAvH;AACD,GApBD;;AAsBA,SAEE,kEAAC,uDAAD,QAEGnB,MAAM,CAACiC,MAAP,GAAgB,CAAhB,GAECjC,MAAM,CAACkC,GAAP,CAAW,CAACC,KAAD,EAAQpB,KAAR,KACP;AACE,OAAG,EAAEoB,KAAK,CAACC,EADb;AAEE,aAAS,EAAC,kCAFZ;AAGE,aAAS,MAHX;AAIE,eAAW,EAAE,MAAMhC,eAAe,EAJpC;AAKE,eAAW,EAAE,MAAMU,eAAe,CAAEC,KAAF,CALpC;AAME,aAAS,EAAEM,CAAC,IAAID,aAAa,CAAEC,CAAF,EAAKN,KAAL;AAN/B,KAQIoB,KAAK,CAACE,IAAN,KAAe,MAAf,GAAyB,kEAAC,wDAAD;AAAU,cAAU,EAAGvC,KAAK,CAACwC,UAA7B;AAA0C,MAAE,EAAGH,KAAK,CAACC,EAArD;AAA0D,SAAK,EAAGrB;AAAlE,IAAzB,GACAoB,KAAK,CAACE,IAAN,KAAe,OAAf,GAA0B,kEAAC,yDAAD;AAAW,cAAU,EAAGvC,KAAK,CAACwC,UAA9B;AAA2C,cAAU,EAAGxC,KAAK,CAACyC,UAA9D;AAA2E,MAAE,EAAGJ,KAAK,CAACC,EAAtF;AAA2F,YAAQ,EAAGrB;AAAtG,IAA1B,GACC,kEAAC,4DAAD;AAAc,cAAU,EAAGjB,KAAK,CAACyC,UAAjC;AAA8C,MAAE,EAAGJ,KAAK,CAACC,EAAzD;AAA8D,SAAK,EAAGrB;AAAtE,IAVL,CADJ,CAFD,GAkBC;AAAG,aAAS,EAAC;AAAb,0BApBJ,CAFF;AA4BH,CApEM;;;;;;;;;;;;;;;;;ACNP;AACA;;AAEA,SAAS0B,QAAT,CAAmB3C,KAAnB,EAA0B;AAEtB,QAAM;AAAE4C,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAuCnD,sEAAgB,EAA7D;AAEA,MAAI,CAACoD,SAAD,EAAYC,YAAZ,IAA4BN,+CAAQ,CAAC;AACrC,UAAMG,QAAQ,EADuB;AAErC,YAAQ,EAF6B;AAEzB;AACZ,YAAQ,OAH6B;AAIrC,mBAAe,EAJsB;AAIlB;AACnB,aAASC,YAAY,EALgB;AAMrC,cAAU;AAN2B,GAAD,CAAxC;;AASA,WAASG,iBAAT,CAA2B1B,CAA3B,EAA8B;AAC1ByB,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAlB,GAA2B,EAAE,GAAGH,SAAL;AAAgBT,MAAAA,EAAE,EAAEO,QAAQ,EAA5B;AAAgCK,MAAAA,IAAI,EAAE3B,CAAC,CAACR,MAAF,CAASoC;AAA/C,KAA3B,GAAoF,EAAE,GAAGJ,SAAL;AAAgBK,MAAAA,WAAW,EAAE7B,CAAC,CAACR,MAAF,CAASoC;AAAtC,KAAtF,CAAZ;AACH;;AAED,WAASE,WAAT,CAAqB9B,CAArB,EAAwB;AACpBA,IAAAA,CAAC,CAAC+B,cAAF;AACAV,IAAAA,QAAQ,CAACG,SAAD,CAAR;AACA/C,IAAAA,KAAK,CAACuD,QAAN;AACH;;AAED,SAAO,kIAEH;AAAK,aAAS,EAAC;AAAf,KACI;AAAG,aAAS,EAAC;AAAb,IADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACKR,SAAS,CAACR,IADf,CAFJ,EAKI;AAAK,aAAS,EAAC;AAAf,KACKQ,SAAS,CAACG,IADf,CALJ,CAFG,EAYH;AAAM,UAAM,EAAC,GAAb;AAAiB,YAAQ,EAAGG,WAA5B;AAA0C,aAAS,EAAC;AAApD,KAEI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,YADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,MAAxB;AAA+B,SAAK,EAAEN,SAAS,CAACG,IAAhD;AAAsD,YAAQ,EAAED,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAAhE;AAA8F,YAAQ;AAAtG,IADJ,CAFJ,CAFJ,EASI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,mBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,aAAxB;AAAsC,SAAK,EAAET,SAAS,CAACK,WAAvD;AAAoE,YAAQ,EAAEH,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB;AAA9E,IADJ,CAFJ,CATJ,CAFJ,EAoBI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,QAAZ;AAAqB,SAAK,EAAC;AAA3B,IADJ,CApBJ,CAZG,CAAP;AAsCH;;AAGD,+DAAeb,QAAf;;;;;;;;;;;;;;;;;ACnEA;AACA;;AAEA,SAASe,WAAT,CAAsB1D,KAAtB,EAA6B;AAEzB,QAAM;AAAE4C,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAuCnD,sEAAgB,EAA7D;AAEA,MAAI,CAACoD,SAAD,EAAYC,YAAZ,IAA4BN,+CAAQ,CAAC;AACrC,UAAMG,QAAQ,EADuB;AAErC,YAAQ,EAF6B;AAEzB;AACZ,YAAQ,MAH6B;AAIrC,WAAO,EAJ8B;AAI1B;AACX,eAAW,EAL0B;AAKtB;AACf,mBAAe,EANsB;AAMlB;AACnB,aAASC,YAAY,EAPgB;AAQrC,mBAAe,EARsB;AAQlB;AACnB,mBAAe,EATsB;AASlB;AACnB,oBAAgB,EAVqB;AAUjB;AACpB,qBAAiB,EAXoB,CAYnC;;AAZmC,GAAD,CAAxC;;AAeA,WAASG,iBAAT,CAA2B1B,CAA3B,EAA8B;AAC1ByB,IAAAA,YAAY,CACPzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAnB,GAA6B,EAAC,GAAGH,SAAJ;AAAeT,MAAAA,EAAE,EAAEO,QAAQ,EAA3B;AAA+BK,MAAAA,IAAI,EAAE3B,CAAC,CAACR,MAAF,CAASoC;AAA9C,KAA7B,GACC5B,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,aAAnB,GAAoC,EAAC,GAAGH,SAAJ;AAAeK,MAAAA,WAAW,EAAE7B,CAAC,CAACR,MAAF,CAASoC;AAArC,KAApC,GACA,EAAC,GAAGJ,SAAJ;AAAeY,MAAAA,GAAG,EAAEpC,CAAC,CAACR,MAAF,CAASoC,KAAT,CAAeS,OAAf,CAAuB,SAAvB,EAAkC,EAAlC;AAApB,KAHQ,CAAZ;AAKH;;AAED,WAASC,YAAT,CAAsBtC,CAAtB,EAAyB;AACrByB,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,KAAlB,GAA0B,EAAC,GAAGH,SAAJ;AAAeY,MAAAA,GAAG,EAAEpC,CAAC,CAACR,MAAF,CAASoC;AAAK;;AAAlC,KAA1B,GAA6F,EAAC,GAAGJ,SAAJ;AAAee,MAAAA,WAAW,EAAEvC,CAAC,CAACR,MAAF,CAASoC;AAArC,KAA/F,CAAZ;AACH;;AAED,WAASE,WAAT,CAAqB9B,CAArB,EAAwB;AAAA;;AACpBA,IAAAA,CAAC,CAAC+B,cAAF;AACAP,IAAAA,SAAS,CAACY,GAAV,GAAgBZ,SAAS,CAACY,GAAV,KAAkB,EAAlB,4BAAuBpD,QAAQ,CAACM,aAAT,CAAuB,8CAAvB,CAAvB,0DAAuB,sBAAwEsC,KAA/F,GAAuGJ,SAAS,CAACY,GAAjI;AACAZ,IAAAA,SAAS,CAACe,WAAV,GAAwBf,SAAS,CAACe,WAAV,KAA0B,EAA1B,6BAA+BvD,QAAQ,CAACM,aAAT,CAAuB,gDAAvB,CAA/B,2DAA+B,uBAA0EsC,KAAzG,GAAiHJ,SAAS,CAACe,WAAnJ;AACAlB,IAAAA,QAAQ,CAACG,SAAD,CAAR;AACA/C,IAAAA,KAAK,CAACuD,QAAN;AACH;;AAED,SAAO,kIAEH;AAAM,UAAM,EAAC,GAAb;AAAiB,YAAQ,EAAGF,WAA5B;AAA0C,aAAS,EAAC;AAApD,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAG,aAAS,EAAC;AAAb,IADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACKN,SAAS,CAACR,IADf,CAFJ,EAKI;AAAK,aAAS,EAAC;AAAf,KACKQ,SAAS,CAACG,IADf,CALJ,CAFJ,EAYI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,WADJ,EAEKH,SAAS,CAACe,WAAV,IAAyB,OAAzB,GACG;AAAQ,QAAI,EAAC,KAAb;AAAmB,SAAK,EAAEf,SAAS,CAACY,GAApC;AAAyC,YAAQ,EAAEE;AAAnD,KACM7D,KAAK,CAACwC,UAAN,CAAiBJ,GAAjB,CAAqB2B,SAAS,IAAI;AAAQ,SAAK,EAAGA,SAAS,CAACZ;AAA1B,KAAoCY,SAAS,CAACb,IAA9C,QAAwDa,SAAS,CAACZ,KAAlE,MAAlC,CADN,CADH,GAKG;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,KAAxB;AAA8B,SAAK,EAAEJ,SAAS,CAACY,GAA/C;AAAoD,YAAQ,EAAEV,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAA9D;AAA4F,YAAQ;AAApG,IADJ,CAPR,CAFJ,EAeI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,YADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,MAAxB;AAA+B,SAAK,EAAET,SAAS,CAACG,IAAhD;AAAsD,YAAQ,EAAED,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAAhE;AAA8F,YAAQ;AAAtG,IADJ,CAFJ,CAfJ,EAsBI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,oBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAQ,QAAI,EAAC,OAAb;AAAqB,SAAK,EAAET,SAAS,CAACe,WAAtC;AAAmD,YAAQ,EAAED;AAA7D,KACI;AAAQ,SAAK,EAAC;AAAd,YADJ,EAEI;AAAQ,SAAK,EAAC;AAAd,qBAFJ,EAGI;AAAQ,SAAK,EAAC;AAAd,cAHJ,EAII;AAAQ,SAAK,EAAC;AAAd,qBAJJ,CADJ,CAFJ,CAtBJ,EAkCI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,mBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,aAAxB;AAAsC,SAAK,EAAEd,SAAS,CAACK,WAAvD;AAAoE,YAAQ,EAAEH,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB;AAA9E,IADJ,CAFJ,CAlCJ,CAFJ,CAZJ,EA2DI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,QAAZ;AAAqB,SAAK,EAAC;AAA3B,IADJ,CA3DJ,CAFG,CAAP;AAmEH;;AAED,+DAAeE,WAAf;;;;;;;;;;;;;;;;;AC/GA;AACA;;AAEA,SAASM,eAAT,CAA0BhE,KAA1B,EAAiC;AAE7B,QAAM;AAAE4C,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAuCnD,sEAAgB,EAA7D;AAEA,MAAI,CAACoD,SAAD,EAAYC,YAAZ,IAA4BN,+CAAQ,CAAC;AACrC,UAAMG,QAAQ,EADuB;AAErC,YAAQ,EAF6B;AAEzB;AACZ,YAAQ,eAH6B;AAIrC,mBAAe,EAJsB;AAIlB;AACnB,WAAO,EAL8B;AAK1B;AACX,eAAW,EAN0B;AAMtB;AACf,aAASC,YAAY,EAPgB;AAQrC,mBAAe,EARsB,CAQnB;;AARmB,GAAD,CAAxC;;AAWA,WAASG,iBAAT,CAA2B1B,CAA3B,EAA8B;AAC1ByB,IAAAA,YAAY,CACPzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAnB,GAA6B,EAAC,GAAGH,SAAJ;AAAeT,MAAAA,EAAE,EAAEO,QAAQ,EAA3B;AAA+BK,MAAAA,IAAI,EAAE3B,CAAC,CAACR,MAAF,CAASoC;AAA9C,KAA7B,GACC5B,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,aAAnB,GAAoC,EAAC,GAAGH,SAAJ;AAAeK,MAAAA,WAAW,EAAE7B,CAAC,CAACR,MAAF,CAASoC;AAArC,KAApC,GACA,EAAC,GAAGJ,SAAJ;AAAeY,MAAAA,GAAG,EAAEpC,CAAC,CAACR,MAAF,CAASoC,KAAT,CAAeS,OAAf,CAAuB,SAAvB,EAAkC,EAAlC;AAApB,KAHQ,CAAZ;AAKH;;AAGD,WAASC,YAAT,CAAsBtC,CAAtB,EAAyB;AACrByB,IAAAA,YAAY,CAAE,EAAC,GAAGD,SAAJ;AAAee,MAAAA,WAAW,EAAEvC,CAAC,CAACR,MAAF,CAASoC;AAArC,KAAF,CAAZ;AACH;;AAED,WAASE,WAAT,CAAqB9B,CAArB,EAAwB;AAAA;;AACpBA,IAAAA,CAAC,CAAC+B,cAAF;AACAP,IAAAA,SAAS,CAACkB,OAAV,GAAoBlB,SAAS,CAACkB,OAAV,KAAsB,EAAtB,4BAA2B1D,QAAQ,CAACM,aAAT,CAAuB,gDAAvB,CAA3B,0DAA2B,sBAA0EsC,KAArG,GAA6GJ,SAAS,CAACkB,OAA3I;AACAlB,IAAAA,SAAS,CAACe,WAAV,GAAwBf,SAAS,CAACe,WAAV,KAA0B,EAA1B,6BAA+BvD,QAAQ,CAACM,aAAT,CAAuB,gDAAvB,CAA/B,2DAA+B,uBAA0EsC,KAAzG,GAAiHJ,SAAS,CAACe,WAAnJ;AACAlB,IAAAA,QAAQ,CAACG,SAAD,CAAR;AACA/C,IAAAA,KAAK,CAACuD,QAAN;AACH;;AAED,SAAO,kIAEH;AAAK,aAAS,EAAC;AAAf,KACI;AAAG,aAAS,EAAC;AAAb,IADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACKR,SAAS,CAACR,IADf,CAFJ,EAKI;AAAK,aAAS,EAAC;AAAf,KACKQ,SAAS,CAACG,IADf,CALJ,CAFG,EAYH;AAAM,UAAM,EAAC,GAAb;AAAiB,YAAQ,EAAGG,WAA5B;AAA0C,aAAS,EAAC;AAApD,KAEI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,WADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,KAAxB;AAA8B,SAAK,EAAEN,SAAS,CAACY,GAA/C;AAAoD,YAAQ,EAAEV,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAA9D;AAA4F,YAAQ;AAApG,IADJ,CAFJ,CAFJ,EASI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,YADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,MAAxB;AAA+B,SAAK,EAAET,SAAS,CAACG,IAAhD;AAAsD,YAAQ,EAAED,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAAhE;AAA8F,YAAQ;AAAtG,IADJ,CAFJ,CATJ,EAgBI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,oBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAQ,QAAI,EAAC,OAAb;AAAqB,SAAK,EAAET,SAAS,CAACe,WAAtC;AAAmD,YAAQ,EAAED;AAA7D,KACI;AAAQ,SAAK,EAAC;AAAd,YADJ,EAEI;AAAQ,SAAK,EAAC;AAAd,cAFJ,CADJ,CAFJ,CAhBJ,EA0BI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,mBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,aAAxB;AAAsC,SAAK,EAAEd,SAAS,CAACK,WAAvD;AAAoE,YAAQ,EAAEH,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB;AAA9E,IADJ,CAFJ,CA1BJ,CAFJ,EAqCI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,QAAZ;AAAqB,SAAK,EAAC;AAA3B,IADJ,CArCJ,CAZG,CAAP;AAwDH;;AAED,+DAAeQ,eAAf;;;;;;;;;;;;;;;;;ACjGA;AACA;;AAEA,SAASE,WAAT,CAAsBlE,KAAtB,EAA6B;AAEzB,QAAM;AAAE4C,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAuCnD,sEAAgB,EAA7D;AAEA,MAAI,CAACoD,SAAD,EAAYC,YAAZ,IAA4BN,+CAAQ,CAAC;AACrC,UAAMG,QAAQ,EADuB;AAErC,gBAAY,EAFyB;AAErB;AAChB,YAAQ,EAH6B;AAGzB;AACZ,YAAQ,UAJ6B;AAKrC,WAAO,EAL8B;AAK1B;AACX,eAAW,EAN0B;AAMtB;AACf,mBAAe,EAPsB;AAOlB;AACnB,aAASC,YAAY,EARgB;AASrC,mBAAe,EATsB;AASlB;AACnB,oBAAgB,EAVqB;AAUjB;AACpB,qBAAiB,EAXoB,CAYnC;;AAZmC,GAAD,CAAxC;;AAeA,WAASG,iBAAT,CAA2B1B,CAA3B,EAA8B;AAC1ByB,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAlB,GAA2B,EAAC,GAAGH,SAAJ;AAAeT,MAAAA,EAAE,EAAEO,QAAQ,EAA3B;AAA+BK,MAAAA,IAAI,EAAE3B,CAAC,CAACR,MAAF,CAASoC;AAA9C,KAA3B,GAAkF,EAAC,GAAGJ,SAAJ;AAAeK,MAAAA,WAAW,EAAE7B,CAAC,CAACR,MAAF,CAASoC;AAArC,KAApF,CAAZ;AACH;;AAED,WAASU,YAAT,CAAsBtC,CAAtB,EAAyB;AACrByB,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,UAAlB,GAA+B,EAAC,GAAGH,SAAJ;AAAeoB,MAAAA,QAAQ,EAAE5C,CAAC,CAACR,MAAF,CAASoC;AAAlC,KAA/B,GAA0E,EAAC,GAAGJ,SAAJ;AAAee,MAAAA,WAAW,EAAEvC,CAAC,CAACR,MAAF,CAASoC;AAArC,KAA5E,CAAZ;AACH;;AAED,WAASE,WAAT,CAAqB9B,CAArB,EAAwB;AAAA;;AACpBA,IAAAA,CAAC,CAAC+B,cAAF;AACAP,IAAAA,SAAS,CAACoB,QAAV,GAAqBpB,SAAS,CAACoB,QAAV,KAAuB,EAAvB,4BAA4B5D,QAAQ,CAACM,aAAT,CAAuB,mDAAvB,CAA5B,0DAA4B,sBAA6EsC,KAAzG,GAAiHJ,SAAS,CAACoB,QAAhJ;AACApB,IAAAA,SAAS,CAACe,WAAV,GAAwBf,SAAS,CAACe,WAAV,KAA0B,EAA1B,6BAA+BvD,QAAQ,CAACM,aAAT,CAAuB,gDAAvB,CAA/B,2DAA+B,uBAA0EsC,KAAzG,GAAiHJ,SAAS,CAACe,WAAnJ;AACAlB,IAAAA,QAAQ,CAACG,SAAD,CAAR;AACA/C,IAAAA,KAAK,CAACuD,QAAN;AACH;;AAED,SAAO,kIAEH;AAAK,aAAS,EAAC;AAAf,KACI;AAAG,aAAS,EAAC;AAAb,IADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACKR,SAAS,CAACR,IADf,CAFJ,EAKI;AAAK,aAAS,EAAC;AAAf,KACKQ,SAAS,CAACG,IADf,CALJ,CAFG,EAYH;AAAM,UAAM,EAAC,GAAb;AAAiB,YAAQ,EAAGG,WAA5B;AAA0C,aAAS,EAAC;AAApD,KAEI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,gBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAQ,QAAI,EAAC,UAAb;AAAwB,SAAK,EAAEN,SAAS,CAACoB,QAAzC;AAAmD,YAAQ,EAAEN;AAA7D,KACM7D,KAAK,CAACyC,UAAN,CAAiBL,GAAjB,CAAqB+B,QAAQ,IAAI;AAAQ,SAAK,EAAGA,QAAQ,CAAChB;AAAzB,KAAmCgB,QAAQ,CAACjB,IAA5C,QAAsDiB,QAAQ,CAAChB,KAA/D,MAAjC,CADN,CADJ,CAFJ,CAFJ,EAWI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,YADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,MAAxB;AAA+B,SAAK,EAAEJ,SAAS,CAACG,IAAhD;AAAsD,YAAQ,EAAED,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAAhE;AAA8F,YAAQ;AAAtG,IADJ,CAFJ,CAXJ,EAkBI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,oBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAQ,QAAI,EAAC,OAAb;AAAqB,SAAK,EAAET,SAAS,CAACe,WAAtC;AAAmD,YAAQ,EAAED;AAA7D,KACI;AAAQ,SAAK,EAAC;AAAd,YADJ,EAEI;AAAQ,SAAK,EAAC;AAAd,cAFJ,EAGI;AAAQ,SAAK,EAAC;AAAd,gBAHJ,CADJ,CAFJ,CAlBJ,EA6BI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,mBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,aAAxB;AAAsC,SAAK,EAAEd,SAAS,CAACK,WAAvD;AAAoE,YAAQ,EAAEH,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB;AAA9E,IADJ,CAFJ,CA7BJ,CAFJ,EAwCI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,QAAZ;AAAqB,SAAK,EAAC;AAA3B,IADJ,CAxCJ,CAZG,CAAP;AA2DH;;AAGD,+DAAeU,WAAf;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AAEA;AACA;;AAEA,SAAStE,SAAT,CAAqB;AAAE0C,EAAAA,EAAF;AAAM8B,EAAAA,QAAN;AAAgB5B,EAAAA,UAAhB;AAA4BC,EAAAA;AAA5B,CAArB,EAAgE;AAE5D,QAAM;AAAEvC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBT,sEAAgB,EAA/C;AACA,QAAM;AAAE2E,IAAAA,SAAF;AAAajE,IAAAA,YAAb;AAA2BkE,IAAAA;AAA3B,MAA6C3E,sEAAgB,EAAnE;AACA,QAAM4E,SAAS,GAAG9E,6CAAM,EAAxB;AAEA,MAAI,CAACsD,SAAD,EAAYC,YAAZ,IAA4BN,+CAAQ,CAACxC,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYA,EAAnC,EAAuC,CAAvC,CAAD,CAAxC;AACA,MAAIoC,WAAW,GAAGxE,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYA,EAAnC,EAAuC,CAAvC,EAA0CpC,MAA5D;AAEAuD,EAAAA,gDAAS,CAAC,MAAM;AACZY,IAAAA,SAAS,CAACtB,SAAD,CAAT;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,WAASE,iBAAT,CAA2B1B,CAA3B,EAA8B;AAC1B,QAAKA,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAvB,EAAgC;AAC5B,YAAM/B,QAAQ,GAAGI,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEA,aAAjE,CAA+EZ,aAA/E,CAA6F,yBAA7F,CAAjB;AACAM,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,GAAiCE,CAAC,CAACR,MAAF,CAASoC,KAAT,IAAkB,EAAlB,GAAuB,SAAvB,GAAmC,SAApE;AACH;;AACDH,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAlB,GAA2B,EAAC,GAAGH,SAAJ;AAAeG,MAAAA,IAAI,EAAE3B,CAAC,CAACR,MAAF,CAASoC;AAA9B,KAA3B,GAAkE,EAAC,GAAGJ,SAAJ;AAAeK,MAAAA,WAAW,EAAE7B,CAAC,CAACR,MAAF,CAASoC;AAArC,KAApE,CAAZ;AACH;;AAED,QAAMnC,eAAe,GAAGC,KAAK,IAAI;AAC7BsD,IAAAA,SAAS,CAACrD,OAAV,GAAoBD,KAApB;AACH,GAFD;;AAIA,QAAMK,aAAa,GAAG,CAACqD,KAAD,EAAQ1D,KAAR,KAAkB;AAEpC,UAAMU,MAAM,GAAG;AACXE,MAAAA,OAAO,EAAE8C,KADE;AAEX7C,MAAAA,KAAK,EAAE6C,KAFI;AAGX5C,MAAAA,WAAW,EAAE,IAHF;AAIXC,MAAAA,cAAc,EAAEf,KAJL;AAKXgB,MAAAA,YAAY,EAAEsC,SAAS,CAACrD,OALb;AAMXkD,MAAAA,QAAQ,EAAEA;AANC,KAAf;AAQAE,IAAAA,aAAa,CAACF,QAAD,CAAb;AACA,QAAIG,SAAS,CAACrD,OAAV,KAAsBD,KAA1B,EAAiCb,YAAY,CAAEuB,MAAF,CAAZ;AACpC,GAZD;;AAcA,SAAO,kIAEH;AAAK,aAAS,EAAC,wBAAf;AAAwC,WAAO,EAAGxB;AAAlD,KACI;AAAG,aAAS,EAAC;AAAb,IADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACK4C,SAAS,CAACR,IADf,CAFJ,EAKI;AAAK,aAAS,EAAC;AAAf,KACKQ,SAAS,CAACG,IADf,CALJ,EAQI;AAAK,aAAS,EAAC;AAAf,KACI;AAAM,QAAI,EAAC,IAAX;AAAgB,UAAM;AAAtB,KAAyBH,SAAS,CAACT,EAAnC,CADJ,EAEI;AAAM,QAAI,EAAC,OAAX;AAAmB,UAAM;AAAzB,KAA4B8B,QAA5B,CAFJ,EAGI;AAAG,aAAS,EAAC;AAAb,IAHJ,CARJ,CAFG,EAiBH;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,YADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,MAAxB;AAA+B,SAAK,EAAErB,SAAS,CAACG,IAAhD;AAAsD,YAAQ,EAAED,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAAhE;AAA8F,eAAW,EAAC,eAA1G;AAA0H,YAAQ;AAAlI,IADJ,CAFJ,CAFJ,EASI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,mBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,aAAxB;AAAsC,SAAK,EAAET,SAAS,CAACK,WAAvD;AAAoE,YAAQ,EAAEH,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB;AAA9E,IADJ,CAFJ,CATJ,EAgBI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,cADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACMkB,WAAW,CAACvC,MAAZ,GAAqB,CAArB,GACEuC,WAAW,CAACtC,GAAZ,CAAgB,CAAEC,KAAF,EAASpB,KAAT,KACZ;AACI,OAAG,EAAEoB,KAAK,CAACC,EADf;AAEI,aAAS,EAAC,kCAFd;AAGI,aAAS,MAHb;AAII,eAAW,EAAG,MAAM;AAAEtB,MAAAA,eAAe,CAAEC,KAAF,CAAf;AAA0B,KAJpD;AAKI,aAAS,EAAG,MAAMK,aAAa,CAAEyB,SAAS,CAACT,EAAZ,EAAgBrB,KAAhB;AALnC,KAOMoB,KAAK,CAACE,IAAN,KAAe,MAAf,GAAyB,kEAAC,kDAAD;AAAU,cAAU,EAAGC,UAAvB;AAAoC,WAAO,EAAGF,EAA9C;AAAmD,MAAE,EAAGD,KAAK,CAACC,EAA9D;AAAmE,SAAK,EAAGrB;AAA3E,IAAzB,GACD,kEAAC,sDAAD;AAAc,cAAU,EAAGwB,UAA3B;AAAwC,WAAO,EAAGH,EAAlD;AAAuD,MAAE,EAAGD,KAAK,CAACC,EAAlE;AAAuE,SAAK,EAAGrB;AAA/E,IARL,CADJ,CADF,GAcE;AAAG,aAAS,EAAC;AAAb,0BAfR,CAFJ,CAhBJ,CAFJ,CAjBG,CAAP;AA8DH;;AAED,+DAAerB,SAAf;;;;;;;;;;;;;;;;;AC7GA;AACA;;AAEA,SAASE,QAAT,CAAoB;AAAEwC,EAAAA,EAAF;AAAMrB,EAAAA,KAAN;AAAa2D,EAAAA,OAAb;AAAsBpC,EAAAA;AAAtB,CAApB,EAAyD;AAErD,QAAM;AAAEtC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBT,sEAAgB,EAA/C;AACA,QAAM;AAAE2E,IAAAA;AAAF,MAAgB1E,sEAAgB,EAAtC;AAEA,MAAI0C,KAAK,GAAGuC,OAAO,GAAG1E,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,KAAasC,OAApC,EAA6C,CAA7C,EAAgD1E,MAAhD,CAAuDsE,MAAvD,CAA8DnC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAApF,EAAwF,CAAxF,CAAH,GAAgGpC,MAAM,CAACsE,MAAP,CAAcnC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAApC,EAAwC,CAAxC,CAAnH;AACA,MAAI,CAACS,SAAD,EAAYC,YAAZ,IAA4BN,+CAAQ,CAACL,KAAD,CAAxC;;AAEA,WAASY,iBAAT,CAA2B1B,CAA3B,EAA8B;AAC1B,QAAKA,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAlB,IAA4B3B,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,KAAnD,EAA2D;AACvD,YAAM/B,QAAQ,GAAGI,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEA,aAAjE,CAA+EZ,aAA/E,CAA6F,yBAA7F,CAAjB;AACAM,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,GAAiCE,CAAC,CAACR,MAAF,CAASoC,KAAT,IAAkB,EAAlB,GAAuB,SAAvB,GAAmC,SAApE;AACH;;AACDH,IAAAA,YAAY,CACRzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAlB,GAA2B,EAAC,GAAGH,SAAJ;AAAeG,MAAAA,IAAI,EAAE3B,CAAC,CAACR,MAAF,CAASoC;AAA9B,KAA3B,GACA5B,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,aAAlB,GAAkC,EAAC,GAAGH,SAAJ;AAAeK,MAAAA,WAAW,EAAE7B,CAAC,CAACR,MAAF,CAASoC;AAArC,KAAlC,GACA,EAAC,GAAGJ,SAAJ;AAAeY,MAAAA,GAAG,EAAEpC,CAAC,CAACR,MAAF,CAASoC,KAAT,CAAeS,OAAf,CAAuB,SAAvB,EAAkC,EAAlC;AAApB,KAHQ,CAAZ;AAKH;;AAED,WAASC,YAAT,CAAsBtC,CAAtB,EAAyB;AACrBA,IAAAA,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEA,aAAjE,CAA+EZ,aAA/E,CAA6F,yBAA7F,EAAwHO,KAAxH,CAA8HC,eAA9H,GACAE,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,OAAlB,IAA6B3B,CAAC,CAACR,MAAF,CAASoC,KAAT,KAAmB,OAAhD,GAA0D,SAA1D,GAAsE,SADtE;AAEAH,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,KAAlB,GAA0B,EAAC,GAAGH,SAAJ;AAAeY,MAAAA,GAAG,EAAEpC,CAAC,CAACR,MAAF,CAASoC;AAA7B,KAA1B,GAAgE,EAAC,GAAGJ,SAAJ;AAAee,MAAAA,WAAW,EAAEvC,CAAC,CAACR,MAAF,CAASoC;AAArC,KAAlE,CAAZ;AACH;;AAEDM,EAAAA,gDAAS,CAAC,MAAM;AACZY,IAAAA,SAAS,CAACtB,SAAD,CAAT;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA,SAAO,kIAEH;AAAK,aAAS,EAAC,wBAAf;AAAwC,WAAO,EAAE5C;AAAjD,KACI;AAAG,aAAS,EAAC;AAAb,IADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACK4C,SAAS,CAACR,IADf,CAFJ,EAKI;AAAK,aAAS,EAAC;AAAf,KACKQ,SAAS,CAACG,IADf,CALJ,EAQI;AAAK,aAAS,EAAC;AAAf,KACI;AAAM,QAAI,EAAC,IAAX;AAAgB,UAAM;AAAtB,KAAyBH,SAAS,CAACT,EAAnC,CADJ,EAEI;AAAM,QAAI,EAAC,OAAX;AAAmB,UAAM;AAAzB,KAA4BrB,KAA5B,CAFJ,EAGI;AAAG,aAAS,EAAC;AAAb,IAHJ,CARJ,CAFG,EAiBH;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,WADJ,EAEK8B,SAAS,CAACe,WAAV,IAAyB,OAAzB,GACG;AAAQ,QAAI,EAAC,KAAb;AAAmB,SAAK,EAAEf,SAAS,CAACY,GAApC;AAAyC,YAAQ,EAAEE;AAAnD,KACMrB,UAAU,CAACJ,GAAX,CAAe2B,SAAS,IAAI;AAAQ,SAAK,EAAGA,SAAS,CAACZ;AAA1B,KAAoCY,SAAS,CAACb,IAA9C,QAAwDa,SAAS,CAACZ,KAAlE,MAA5B,CADN,CADH,GAKG;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,KAAxB;AAA8B,SAAK,EAAEJ,SAAS,CAACY,GAA/C;AAAoD,YAAQ,EAAEV,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAA9D;AAA4F,eAAW,EAAC,cAAxG;AAAuH,YAAQ;AAA/H,IADJ,CAPR,CAFJ,EAeI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,YADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,MAAxB;AAA+B,SAAK,EAAET,SAAS,CAACG,IAAhD;AAAsD,YAAQ,EAAED,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAAhE;AAA8F,eAAW,EAAC,eAA1G;AAA0H,YAAQ;AAAlI,IADJ,CAFJ,CAfJ,EAsBI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,oBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAQ,QAAI,EAAC,OAAb;AAAqB,SAAK,EAAET,SAAS,CAACe,WAAtC;AAAmD,YAAQ,EAAED;AAA7D,KACI;AAAQ,SAAK,EAAC;AAAd,YADJ,EAEI;AAAQ,SAAK,EAAC;AAAd,qBAFJ,EAGI;AAAQ,SAAK,EAAC;AAAd,cAHJ,EAII;AAAQ,SAAK,EAAC;AAAd,qBAJJ,CADJ,CAFJ,CAtBJ,EAkCI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,mBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,aAAxB;AAAsC,SAAK,EAAEd,SAAS,CAACK,WAAvD;AAAoE,YAAQ,EAAEH,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB;AAA9E,IADJ,CAFJ,CAlCJ,CAFJ,CAjBG,CAAP;AAiEH;;AAED,+DAAe1D,QAAf;;;;;;;;;;;;;;;;;ACpGA;AACA;;AAEA,SAASD,YAAT,CAAwB;AAAEyC,EAAAA,EAAF;AAAMrB,EAAAA,KAAN;AAAa2D,EAAAA,OAAb;AAAsBnC,EAAAA;AAAtB,CAAxB,EAA4D;AAExD,QAAM;AAAEvC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBT,sEAAgB,EAA/C;AACA,QAAM;AAAE2E,IAAAA;AAAF,MAAgB1E,sEAAgB,EAAtC;AAEA,MAAI0C,KAAK,GAAGuC,OAAO,GAAG1E,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,KAAasC,OAApC,EAA6C,CAA7C,EAAgD1E,MAAhD,CAAuDsE,MAAvD,CAA8DnC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAApF,EAAwF,CAAxF,CAAH,GAAgGpC,MAAM,CAACsE,MAAP,CAAcnC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaA,EAApC,EAAwC,CAAxC,CAAnH;AACA,MAAI,CAACS,SAAD,EAAYC,YAAZ,IAA4BN,+CAAQ,CAACL,KAAD,CAAxC;AAEAoB,EAAAA,gDAAS,CAAC,MAAM;AACZY,IAAAA,SAAS,CAACtB,SAAD,CAAT;AACH,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,WAASE,iBAAT,CAA2B1B,CAA3B,EAA8B;AAC1B,QAAKA,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAvB,EAAgC;AAC5B,YAAM/B,QAAQ,GAAGI,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEA,aAAjE,CAA+EZ,aAA/E,CAA6F,yBAA7F,CAAjB;AACAM,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,GAAiCE,CAAC,CAACR,MAAF,CAASoC,KAAT,IAAkB,EAAlB,GAAuB,SAAvB,GAAmC,SAApE;AACH;;AACDH,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,MAAlB,GAA2B,EAAC,GAAGH,SAAJ;AAAeG,MAAAA,IAAI,EAAE3B,CAAC,CAACR,MAAF,CAASoC;AAA9B,KAA3B,GAAkE,EAAC,GAAGJ,SAAJ;AAAeK,MAAAA,WAAW,EAAE7B,CAAC,CAACR,MAAF,CAASoC;AAArC,KAApE,CAAZ;AACH;;AAED,WAASU,YAAT,CAAsBtC,CAAtB,EAAyB;AACrByB,IAAAA,YAAY,CAAEzB,CAAC,CAACR,MAAF,CAASmC,IAAT,KAAkB,UAAlB,GAA+B,EAAC,GAAGH,SAAJ;AAAeoB,MAAAA,QAAQ,EAAE5C,CAAC,CAACR,MAAF,CAASoC;AAAlC,KAA/B,GAA0E,EAAC,GAAGJ,SAAJ;AAAee,MAAAA,WAAW,EAAEvC,CAAC,CAACR,MAAF,CAASoC;AAArC,KAA5E,CAAZ;AACH;;AAED,SAAO,kIAEH;AAAK,aAAS,EAAC,wBAAf;AAAwC,WAAO,EAAEhD;AAAjD,KACI;AAAG,aAAS,EAAC;AAAb,IADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACK4C,SAAS,CAACR,IADf,CAFJ,EAKI;AAAK,aAAS,EAAC;AAAf,KACKQ,SAAS,CAACG,IADf,CALJ,EAQI;AAAK,aAAS,EAAC;AAAf,KACI;AAAM,QAAI,EAAC,IAAX;AAAgB,UAAM;AAAtB,KAAyBH,SAAS,CAACT,EAAnC,CADJ,EAEI;AAAM,QAAI,EAAC,OAAX;AAAmB,UAAM;AAAzB,KAA4BrB,KAA5B,CAFJ,EAGI;AAAG,aAAS,EAAC;AAAb,IAHJ,CARJ,CAFG,EAiBH;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,gBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAQ,QAAI,EAAC,UAAb;AAAwB,SAAK,EAAE8B,SAAS,CAACoB,QAAzC;AAAmD,YAAQ,EAAEN;AAA7D,KACMpB,UAAU,CAACL,GAAX,CAAe+B,QAAQ,IAAI;AAAQ,SAAK,EAAGA,QAAQ,CAAChB;AAAzB,KAAmCgB,QAAQ,CAACjB,IAA5C,QAAsDiB,QAAQ,CAAChB,KAA/D,MAA3B,CADN,CADJ,CAFJ,CAFJ,EAWI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,YADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,MAAxB;AAA+B,SAAK,EAAEJ,SAAS,CAACG,IAAhD;AAAsD,YAAQ,EAAED,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB,CAAhE;AAA8F,eAAW,EAAC,eAA1G;AAA0H,YAAQ;AAAlI,IADJ,CAFJ,CAXJ,EAmBI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,oBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAQ,QAAI,EAAC,OAAb;AAAqB,SAAK,EAAET,SAAS,CAACe,WAAtC;AAAmD,YAAQ,EAAED;AAA7D,KACI;AAAQ,SAAK,EAAC;AAAd,YADJ,EAEI;AAAQ,SAAK,EAAC;AAAd,cAFJ,EAGI;AAAQ,SAAK,EAAC;AAAd,gBAHJ,CADJ,CAFJ,CAnBJ,EA8BI;AAAK,aAAS,EAAC;AAAf,KACI;AAAK,aAAS,EAAC;AAAf,mBADJ,EAEI;AAAK,aAAS,EAAC;AAAf,KACI;AAAO,QAAI,EAAC,MAAZ;AAAmB,QAAI,EAAC,aAAxB;AAAsC,SAAK,EAAEd,SAAS,CAACK,WAAvD;AAAoE,YAAQ,EAAEH,iBAAiB,CAACO,IAAlB,CAAuB,IAAvB;AAA9E,IADJ,CAFJ,CA9BJ,CAFJ,CAjBG,CAAP;AA+DH;;AAED,+DAAe3D,YAAf;;;;;;;;;;;;;;AC5Fe,SAASgF,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAE9C,MAAI7E,MAAM,GAAG8E,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,KAAK,CAAC5E,MAArB,CAAX,CAAb;;AAEA,UAAQ6E,MAAM,CAACxC,IAAf;AACE,SAAK,WAAL;AACE,aAAO,EACL,GAAGuC,KADE;AAEL5E,QAAAA,MAAM,EAAE,CAAC,GAAG4E,KAAK,CAAC5E,MAAV,EAAkB6E,MAAM,CAACI,OAAzB;AAFH,OAAP;;AAKF,SAAK,YAAL;AACE,YAAMC,YAAY,GAAGL,MAAM,CAACI,OAA5B;AAEA,YAAME,aAAa,GAAGP,KAAK,CAAC5E,MAAN,CAAakC,GAAb,CAAkBC,KAAD,IAAW;AAChD,YAAIA,KAAK,CAACC,EAAN,KAAa8C,YAAY,CAAC9C,EAA9B,EAAkC;AAChC,iBAAO8C,YAAP;AACD;;AACD,eAAO/C,KAAP;AACD,OALqB,CAAtB;AAOA,aAAO,EACL,GAAGyC,KADE;AAEL5E,QAAAA,MAAM,EAAEmF;AAFH,OAAP;;AAKF,SAAK,cAAL;AAEE,YAAMjB,QAAQ,GAAGW,MAAM,CAACI,OAAP,CAAef,QAAhC;AACA,YAAMkB,OAAO,GAAGP,MAAM,CAACI,OAAP,CAAeG,OAA/B;AACA,YAAMb,KAAK,GAAGvE,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYyC,MAAM,CAACI,OAAP,CAAeR,KAAlD,EAAyD,CAAzD,CAAd;AAEAzE,MAAAA,MAAM,GAAGA,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYyC,MAAM,CAACI,OAAP,CAAeR,KAAlD,CAAT;AACA,aAAOI,MAAM,CAACI,OAAP,CAAeR,KAAf,GAAuB,EAC5B,GAAGG,KADyB;AAE5B5E,QAAAA,MAAM,EAAE,CACN,GAAGA,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgBnB,QAAhB,CADG,EAEN,EAAE,GAAGK,KAAL;AAAYvE,UAAAA,MAAM,EAAEuE,KAAK,CAACvE,MAAN,CAAasE,MAAb,CAAoBnC,KAAK,IAAIA,KAAK,CAACC,EAAN,IAAYgD,OAAzC;AAApB,SAFM,EAGN,GAAGpF,MAAM,CAACqF,KAAP,CAAanB,QAAb,EAAuBlE,MAAM,CAACiC,MAA9B,CAHG;AAFoB,OAAvB,GAOH,EACF,GAAG2C,KADD;AAEF5E,QAAAA,MAAM,EAAE4E,KAAK,CAAC5E,MAAN,CAAasE,MAAb,CACNnC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAayC,MAAM,CAACI,OAAP,CAAeG,OAD/B;AAFN,OAPJ;;AAcF,SAAK,eAAL;AAEE,UAAIE,QAAJ;AAEA,YAAM3D,OAAO,GAAGkD,MAAM,CAACI,OAAP,CAAetD,OAA/B;AACA,YAAMD,YAAY,GAAGmD,MAAM,CAACI,OAAP,CAAevD,YAApC;AACA,YAAME,KAAK,GAAGiD,MAAM,CAACI,OAAP,CAAerD,KAA7B;AACA,YAAME,cAAc,GAAG+C,MAAM,CAACI,OAAP,CAAenD,cAAtC;AACA,YAAMD,WAAW,GAAGgD,MAAM,CAACI,OAAP,CAAepD,WAAnC;AACA,YAAME,YAAY,GAAG8C,MAAM,CAACI,OAAP,CAAelD,YAApC;AACA,YAAMwD,WAAW,GAAGvF,MAAM,CAAC8B,cAAD,CAA1B;;AAEA,UAAKH,OAAL,EAAe;AACb,cAAM6D,SAAS,GAAGxF,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYT,OAAnC,EAA4C,CAA5C,CAAlB;;AACA,YAAKC,KAAL,EAAa;AACX,gBAAM6D,OAAO,GAAGzF,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYR,KAAnC,EAA0C,CAA1C,CAAhB;;AACA,cAAKD,OAAO,IAAIC,KAAhB,EAAwB;AACtB;AACA,kBAAMsC,QAAQ,GAAGW,MAAM,CAACI,OAAP,CAAef,QAAhC;AACAwB,YAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2B/D,KAAM,eAAcsC,QAAS,SAAQpC,cAAe,OAAMC,YAAa,EAA/G;AAEA,kBAAM6D,gBAAgB,GAAGH,OAAO,CAACzF,MAAR,CAAe8B,cAAf,CAAzB;AAEA2D,YAAAA,OAAO,CAACzF,MAAR,CAAe6F,MAAf,CAAsB/D,cAAtB,EAAsC,CAAtC;AAEA9B,YAAAA,MAAM,GAAGA,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYR,KAAnC,CAAT;AACA6D,YAAAA,OAAO,CAACzF,MAAR,GAAiByF,OAAO,CAACzF,MAAR,CAAesE,MAAf,CAAsBnC,KAAK,IAAIA,KAAK,CAACC,EAAN,IAAYmD,WAAW,CAACnD,EAAvD,CAAjB;AAEA,kBAAM0D,WAAW,GAAG,CAClB,GAAGL,OAAO,CAACzF,MAAR,CAAeqF,KAAf,CAAqB,CAArB,EAAwBtD,YAAxB,CADe,EAElB,EAAE,GAAG6D,gBAAL;AAAuBG,cAAAA,KAAK,EAAE,CAAEhE,YAAY,GAAG,CAAjB,EAAqBiE,QAArB;AAA9B,aAFkB,EAGlB,GAAGP,OAAO,CAACzF,MAAR,CAAeqF,KAAf,CAAqBtD,YAArB,EAAmC0D,OAAO,CAACzF,MAAR,CAAeiC,MAAlD,CAHe,CAApB;AAMA,kBAAMgE,QAAQ,GAAG,CACf,GAAGjG,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgBnB,QAAhB,CADY,EAEf,EAAE,GAAGuB,OAAL;AAAczF,cAAAA,MAAM,EAAE8F,WAAtB;AAAmCC,cAAAA,KAAK,EAAE,CAAE7B,QAAQ,GAAG,CAAb,EAAiB8B,QAAjB;AAA1C,aAFe,EAGf,GAAGhG,MAAM,CAACqF,KAAP,CAAanB,QAAb,EAAuBlE,MAAM,CAACiC,MAA9B,CAHY,CAAjB;AAMAqD,YAAAA,QAAQ,GAAG,EACT,GAAGV,KADM;AAET5E,cAAAA,MAAM,EAAEiG;AAFC,aAAX;AAID,WA5BD,MA4BO;AACL;AACAP,YAAAA,OAAO,CAACC,GAAR,CAAa,GAAE9D,WAAY,eAAcF,OAAQ,aAAYC,KAAM,EAAnE;AAEA,kBAAMgE,gBAAgB,GAAGJ,SAAS,CAACxF,MAAV,CAAiBsE,MAAjB,CAAwBnC,KAAK,IAAIA,KAAK,CAACC,EAAN,IAAYP,WAA7C,EAA0D,CAA1D,CAAzB;AACA,kBAAMqE,eAAe,GAAG,CACtB,GAAGV,SAAS,CAACxF,MAAV,CAAiBsE,MAAjB,CACAnC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaP,WADvB,CADmB,CAAxB;AAKA,kBAAMsE,aAAa,GAAG,CACpB,GAAGV,OAAO,CAACzF,MADS,EAEpB,EAAE,GAAG4F,gBAAL;AAAuBG,cAAAA,KAAK,EAAE,CAAEN,OAAO,CAACzF,MAAR,CAAeiC,MAAf,GAAwB,CAA1B,EAA8B+D,QAA9B;AAA9B,aAFoB,CAAtB;AAKAhG,YAAAA,MAAM,GAAGA,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYT,OAAZ,IAAuB4C,KAAK,CAACnC,EAAN,IAAYR,KAA1D,CAAT;AACA,kBAAMqE,QAAQ,GAAGvE,YAAY,GAAGK,YAAf,GAA8B,CAC7C,GAAG/B,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgBtD,YAAhB,CAD0C,EAE7C,EAAE,GAAG0D,OAAL;AAAczF,cAAAA,MAAM,EAAEmG;AAAtB,aAF6C,EAG7C,GAAGnG,MAAM,CAACqF,KAAP,CAAatD,YAAb,EAA2BL,YAA3B,CAH0C,EAI7C,EAAE,GAAG8D,SAAL;AAAgBxF,cAAAA,MAAM,EAAEkG;AAAxB,aAJ6C,EAK7C,GAAGlG,MAAM,CAACqF,KAAP,CAAa3D,YAAb,EAA2B1B,MAAM,CAACiC,MAAlC,CAL0C,CAA9B,GAMb,CACF,GAAGjC,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgB3D,YAAhB,CADD,EAEF,EAAE,GAAG8D,SAAL;AAAgBxF,cAAAA,MAAM,EAAEkG;AAAxB,aAFE,EAGF,GAAGlG,MAAM,CAACqF,KAAP,CAAa3D,YAAb,EAA2BK,YAA3B,CAHD,EAIF,EAAE,GAAG0D,OAAL;AAAczF,cAAAA,MAAM,EAAEmG;AAAtB,aAJE,EAKF,GAAGnG,MAAM,CAACqF,KAAP,CAAatD,YAAb,EAA2B/B,MAAM,CAACiC,MAAlC,CALD,CANJ;AAcAqD,YAAAA,QAAQ,GAAG,EACT,GAAGV,KADM;AAET5E,cAAAA,MAAM,EAAEiG;AAFC,aAAX;AAID;;AACDR,UAAAA,OAAO,CAACzF,MAAR,CAAeO,OAAf,CAAuB,CAAC4B,KAAD,EAAQpB,KAAR,KAAkB;AAACoB,YAAAA,KAAK,CAAC4D,KAAN,GAAc,CAAChF,KAAK,GAAG,CAAT,EAAYiF,QAAZ,EAAd;AAAsC,WAAhF;AACD,SAlED,MAkEO;AACL;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAa,GAAE9D,WAAY,eAAcF,OAAQ,aAAYI,YAAa,EAA1E;AAEA/B,UAAAA,MAAM,GAAGA,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYT,OAAnC,CAAT;AAEA,gBAAMiE,gBAAgB,GAAGJ,SAAS,CAACxF,MAAV,CAAiBsE,MAAjB,CAAwBnC,KAAK,IAAIA,KAAK,CAACC,EAAN,IAAYP,WAA7C,EAA0D,CAA1D,CAAzB;AACA,gBAAMiE,WAAW,GAAG,CAClB,GAAGN,SAAS,CAACxF,MAAV,CAAiBsE,MAAjB,CACAnC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaP,WADvB,CADe,CAApB;AAMA,gBAAMoE,QAAQ,GAAGlE,YAAY,GAAGL,YAAf,GAA8B,CAC7C,GAAG1B,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgBtD,YAAhB,CAD0C,EAE7C,EAAE,GAAG6D,gBAAL;AAAuBG,YAAAA,KAAK,EAAE,CAAChE,YAAY,GAAG,CAAhB,EAAmBiE,QAAnB;AAA9B,WAF6C,EAG7C,GAAGhG,MAAM,CAACqF,KAAP,CAAatD,YAAb,EAA2BL,YAA3B,CAH0C,EAI7C,EAAE,GAAG8D,SAAL;AAAgBxF,YAAAA,MAAM,EAAE8F;AAAxB,WAJ6C,EAK7C,GAAG9F,MAAM,CAACqF,KAAP,CAAa3D,YAAb,EAA2B1B,MAAM,CAACiC,MAAlC,CAL0C,CAA9B,GAMb,CACF,GAAGjC,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgB3D,YAAhB,CADD,EAEF,EAAE,GAAG8D,SAAL;AAAgBxF,YAAAA,MAAM,EAAE8F;AAAxB,WAFE,EAGF,GAAG9F,MAAM,CAACqF,KAAP,CAAa3D,YAAb,EAA2BK,YAA3B,CAHD,EAIF,EAAE,GAAG6D,gBAAL;AAAuBG,YAAAA,KAAK,EAAE,CAAChE,YAAY,GAAG,CAAhB,EAAmBiE,QAAnB;AAA9B,WAJE,EAKF,GAAGhG,MAAM,CAACqF,KAAP,CAAatD,YAAb,EAA2B/B,MAAM,CAACiC,MAAlC,CALD,CANJ;AAcAqD,UAAAA,QAAQ,GAAG,EACT,GAAGV,KADM;AAET5E,YAAAA,MAAM,EAAEiG;AAFC,WAAX;AAID;;AACDT,QAAAA,SAAS,CAACxF,MAAV,CAAiBO,OAAjB,CAAyB,CAAC4B,KAAD,EAAQpB,KAAR,KAAkB;AAACoB,UAAAA,KAAK,CAAC4D,KAAN,GAAc,CAAChF,KAAK,GAAG,CAAT,EAAYiF,QAAZ,EAAd;AAAsC,SAAlF;AACD,OArGD,MAqGO;AAEL,cAAMzB,KAAK,GAAGvE,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYR,KAAnC,EAA0C,CAA1C,CAAd;AAEA5B,QAAAA,MAAM,CAAC6F,MAAP,CAAc/D,cAAd,EAA8B,CAA9B;;AAEA,YAAKF,KAAL,EAAa;AACX;AACA8D,UAAAA,OAAO,CAACC,GAAR,CAAa,gBAAe7D,cAAe,eAAcF,KAAM,EAA/D;AAEA5B,UAAAA,MAAM,GAAGA,MAAM,CAACsE,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACnC,EAAN,IAAYR,KAAnC,CAAT;AAEA,gBAAMkE,WAAW,GAAG,CAClB,GAAGvB,KAAK,CAACvE,MADS,EAElB,EAAE,GAAGuF,WAAL;AAAkBQ,YAAAA,KAAK,EAAE,CAAExB,KAAK,CAACvE,MAAN,CAAaiC,MAAb,GAAsB,CAAxB,EAA4B+D,QAA5B;AAAzB,WAFkB,CAApB;AAKA,gBAAMC,QAAQ,GAAG,CACf,GAAGjG,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgBtD,YAAhB,CADY,EAEf,EAAE,GAAGwC,KAAL;AAAYvE,YAAAA,MAAM,EAAE8F;AAApB,WAFe,EAGf,GAAG9F,MAAM,CAACqF,KAAP,CAAatD,YAAb,EAA2B/B,MAAM,CAACiC,MAAlC,CAHY,CAAjB;AAMAsC,UAAAA,KAAK,CAACvE,MAAN,CAAaO,OAAb,CAAqB,CAAC4B,KAAD,EAAQpB,KAAR,KAAkB;AAACoB,YAAAA,KAAK,CAAC4D,KAAN,GAAc,CAAChF,KAAK,GAAG,CAAT,EAAYiF,QAAZ,EAAd;AAAsC,WAA9E;AAEAV,UAAAA,QAAQ,GAAG,EACT,GAAGV,KADM;AAET5E,YAAAA,MAAM,EAAEiG;AAFC,WAAX;AAID,SAvBD,MAuBO;AACL;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAa,cAAa7D,cAAe,OAAMC,YAAa,EAA5D;AAEA,gBAAMkE,QAAQ,GAAG,CACb,GAAGjG,MAAM,CAACqF,KAAP,CAAa,CAAb,EAAgBtD,YAAhB,CADU,EAEb,EAAE,GAAGwD,WAAL;AAAkBQ,YAAAA,KAAK,EAAE,CAAChE,YAAY,GAAG,CAAhB,EAAmBiE,QAAnB;AAAzB,WAFa,EAGb,GAAGhG,MAAM,CAACqF,KAAP,CAAatD,YAAb,EAA2B/B,MAAM,CAACiC,MAAlC,CAHU,CAAjB;AAMAqD,UAAAA,QAAQ,GAAG,EACT,GAAGV,KADM;AAET5E,YAAAA,MAAM,EAAEiG;AAFC,WAAX;AAID;AACF;;AAEDjG,MAAAA,MAAM,CAACO,OAAP,CAAe,CAAC4B,KAAD,EAAQpB,KAAR,KAAkB;AAACoB,QAAAA,KAAK,CAAC4D,KAAN,GAAehF,KAAK,IAAIgB,YAAV,GAA0B,CAAChB,KAAK,GAAG,CAAT,EAAYiF,QAAZ,EAA1B,GAAmD,CAACjF,KAAK,GAAG,CAAT,EAAYiF,QAAZ,EAAjE;AAAyF,OAA3H;AAEA,aAAOV,QAAP;;AAEF;AACE,aAAOV,KAAP;AA/MJ;AAkND;;;;;;;;;;;;;;;;;;;;;;ACtNH;AAEA;AAEA,MAAM2B,YAAY,GAAG;AAAEvG,EAAAA,MAAM,EAAE;AAAV,CAArB;AACA,IAAIwG,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAAA;;AAC/B,+BAAGpG,QAAQ,CAACqG,cAAT,CAAwB,qBAAxB,CAAH,kDAAG,sBAAgDzD,KAAnD,EAA0DsD,YAAY,CAACvG,MAAb,GAAsB8E,IAAI,CAACC,KAAL,CAAW1E,QAAQ,CAACqG,cAAT,CAAwB,qBAAxB,EAA+CzD,KAA1D,EAAiE0D,YAAvF;AAC3D,CAFyB,EAEvB,CAFuB,CAA1B;AAIA,MAAMC,aAAa,GAAGR,oDAAa,CAACG,YAAD,CAAnC;AACA,MAAMM,aAAa,GAAGT,oDAAa,CAACG,YAAD,CAAnC;AAEO,MAAMO,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAE9C,QAAM,CAACnC,KAAD,EAAQoC,QAAR,IAAoBV,iDAAU,CAAC3B,mDAAD,EAAa4B,YAAb,CAApC;AACA,MAAIU,UAAJ;;AAEA,WAASvE,QAAT,CAAkBP,KAAlB,EAAyB;AACvB6E,IAAAA,QAAQ,CAAC;AACP3E,MAAAA,IAAI,EAAE,WADC;AAEP4C,MAAAA,OAAO,EAAE9C;AAFF,KAAD,CAAR;AAID;;AAED,WAASgC,SAAT,CAAmBhC,KAAnB,EAA0B;AACxB6E,IAAAA,QAAQ,CAAC;AACP3E,MAAAA,IAAI,EAAE,YADC;AAEP4C,MAAAA,OAAO,EAAE9C;AAFF,KAAD,CAAR;AAID;;AAED,WAAS+E,WAAT,CAAqBzF,MAArB,EAA6B;AAC3BuF,IAAAA,QAAQ,CAAC;AACP3E,MAAAA,IAAI,EAAE,cADC;AAEP4C,MAAAA,OAAO,EAAExD;AAFF,KAAD,CAAR;AAID;;AAED,WAASvB,YAAT,CAAsBuB,MAAtB,EAA8B;AAC5BuF,IAAAA,QAAQ,CAAC;AACP3E,MAAAA,IAAI,EAAE,eADC;AAEP4C,MAAAA,OAAO,EAAExD;AAFF,KAAD,CAAR;AAID;;AAED,WAASkB,QAAT,GAAoB;AAClB,QAAIwE,GAAG,GAAGvC,KAAK,CAAC5E,MAAN,CAAakC,GAAb,CAAiBC,KAAK,IAAIA,KAAK,CAACC,EAAhC,CAAV;AACAwC,IAAAA,KAAK,CAAC5E,MAAN,CAAakC,GAAb,CAAiBC,KAAK,IAAI;AACxB,UAAKA,KAAK,CAACE,IAAN,IAAc,OAAnB,EAA6B;AAC3BF,QAAAA,KAAK,CAACnC,MAAN,CAAakC,GAAb,CAAiBC,KAAK,IAAIgF,GAAG,CAACC,IAAJ,CAASjF,KAAK,CAACC,EAAf,CAA1B;AACD;AACF,KAJD;AAKA,WAAOwC,KAAK,CAAC5E,MAAN,CAAaiC,MAAb,IAAuB,CAAvB,IAA4BoF,KAAK,CAACC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBH,GAArB,CAAD,CAAjC,GAA+D,GAA/D,GAAqE,CAACG,IAAI,CAACC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBH,GAArB,IAA4B,CAA7B,EAAgCnB,QAAhC,EAA5E;AACD;;AAED,WAASpD,YAAT,GAAwB;AACtB,WAAO,CAACgC,KAAK,CAAC5E,MAAN,CAAaiC,MAAb,GAAsB,CAAvB,EAA0B+D,QAA1B,EAAP;AACD;;AAED,WAAS/F,UAAT,CAAoBoB,CAApB,EAAsB;AAEpB,UAAMoG,IAAI,GAAGpG,CAAC,CAACR,MAAF,CAASJ,SAAT,CAAmBC,QAAnB,CAA4B,wBAA5B,IAAwDW,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBZ,aAAvB,CAAqC,wBAArC,CAAxD,GAAyHU,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCZ,aAArC,CAAmD,wBAAnD,CAAtI;AACA,UAAM+G,SAAS,GAAGrG,CAAC,CAACR,MAAF,CAASJ,SAAT,CAAmBC,QAAnB,CAA4B,wBAA5B,IAAwDW,CAAC,CAACR,MAAF,CAASF,aAAT,CAAuB,GAAvB,EAA4BF,SAApF,GAAgGY,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBZ,aAAvB,CAAqC,GAArC,EAA0CF,SAA5J;;AACA,QAAGY,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBd,SAAvB,CAAiCC,QAAjC,CAA0C,0BAA1C,CAAH,EAAyE;AACvE,YAAMe,MAAM,GAAG;AACbyC,QAAAA,QAAQ,EAAE7C,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEd,SAAjE,CAA2EC,QAA3E,CAAoF,OAApF,IAA+FW,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEA,aAAjE,CAA+EA,aAA/E,CAA6FA,aAA7F,CAA2GA,aAA3G,CAAyHZ,aAAzH,CAAuI,kBAAvI,EAA2JgH,SAA1P,GAAsQ,IADnQ;AAEblD,QAAAA,KAAK,EAAEpD,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEd,SAAjE,CAA2EC,QAA3E,CAAoF,OAApF,IAA+FW,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBA,aAAvB,CAAqCA,aAArC,CAAmDA,aAAnD,CAAiEA,aAAjE,CAA+EA,aAA/E,CAA6FA,aAA7F,CAA2GA,aAA3G,CAAyHZ,aAAzH,CAAuI,MAAvI,EAA+IgH,SAA9O,GAA0P,IAFpP;AAGbvC,QAAAA,OAAO,EAAE/D,CAAC,CAACR,MAAF,CAASU,aAAT,CAAuBZ,aAAvB,CAAqC,eAArC,EAAsDgH;AAHlD,OAAf;AAKAT,MAAAA,WAAW,CAAEzF,MAAF,CAAX;AACD,KAPD,MAOO;AACL,UAAIiG,SAAS,CAAChH,QAAV,CAAmB,2BAAnB,CAAJ,EAAqD;AACnD+G,QAAAA,IAAI,CAACvG,KAAL,CAAW0G,OAAX,GAAqB,MAArB;AACAF,QAAAA,SAAS,CAACG,GAAV,CAAc,4BAAd;AACAH,QAAAA,SAAS,CAACI,MAAV,CAAiB,2BAAjB;AACD,OAJD,MAIO;AACLL,QAAAA,IAAI,CAACvG,KAAL,CAAW0G,OAAX,GAAqB,OAArB;AACAF,QAAAA,SAAS,CAACG,GAAV,CAAc,2BAAd;AACAH,QAAAA,SAAS,CAACI,MAAV,CAAiB,4BAAjB;AACD;;AACDL,MAAAA,IAAI,CAAClG,aAAL,CAAmBd,SAAnB,CAA6BsH,MAA7B,CAAoC,MAApC,EAVK,CAUuC;;AAC5CN,MAAAA,IAAI,CAAClG,aAAL,CAAmBZ,aAAnB,CAAiC,yBAAjC,EAA4DF,SAA5D,CAAsEsH,MAAtE,CAA6E,MAA7E;AACAN,MAAAA,IAAI,CAAClG,aAAL,CAAmBZ,aAAnB,CAAiC,yBAAjC,EAA4DF,SAA5D,CAAsEsH,MAAtE,CAA6E,MAA7E;AACAN,MAAAA,IAAI,CAAClG,aAAL,CAAmBZ,aAAnB,CAAiC,yBAAjC,EAA4DF,SAA5D,CAAsEsH,MAAtE,CAA6E,MAA7E;AACD;AAEF;;AAED,WAAS5H,aAAT,GAAyB;AAAE,WAAO8G,UAAP;AAAmB;;AAE9C,WAAS7C,aAAT,CAAwBrD,KAAxB,EAAgC;AAAEkG,IAAAA,UAAU,GAAGlG,KAAb;AAAoB,GA9ER,CAgF9C;;;AACAwC,EAAAA,gDAAS,CAAC,MAAM;AACdlD,IAAAA,QAAQ,CAACqG,cAAT,CAAyB,qBAAzB,EAAiDzD,KAAjD,GAAyD6B,IAAI,CAACE,SAAL,CAAgB;AAAE2B,MAAAA,YAAY,EAAE,CAAC,GAAG/B,KAAK,CAAC5E,MAAV;AAAhB,KAAhB,CAAzD,CADc,CAEd;;AACAgI,IAAAA,aAAa,CAACxB,QAAD,CAAb;AACD,GAJQ,EAIN,CAAC5B,KAAD,CAJM,CAAT;AAMA,SACE,kEAAC,aAAD,CAAe,QAAf;AACE,SAAK,EAAE;AAAE5E,MAAAA,MAAM,EAAE4E,KAAK,CAAC5E,MAAhB;AAAwBC,MAAAA;AAAxB;AADT,KAGE,kEAAC,aAAD,CAAe,QAAf;AACE,SAAK,EAAE;AACLyC,MAAAA,QADK;AAELyB,MAAAA,SAFK;AAGL+C,MAAAA,WAHK;AAILhH,MAAAA,YAJK;AAKLyC,MAAAA,QALK;AAMLC,MAAAA,YANK;AAOLzC,MAAAA,aAPK;AAQLiE,MAAAA;AARK;AADT,KAYG2C,QAZH,CAHF,CADF;AAoBD,CA3GM;AA6GA,MAAMvH,gBAAgB,GAAG,MAAM6G,iDAAU,CAACO,aAAD,CAAzC;AACA,MAAMnH,gBAAgB,GAAG,MAAM4G,iDAAU,CAACQ,aAAD,CAAzC;;;;;;;;;;;AC1HP;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C,eAAe;WACf,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEAxG,QAAQ,CAAC4H,gBAAT,CAA0B,kBAA1B,EAA8C,YAAW;AACrD,WAASC,GAAT,GAAgB;AAEZ,UAAM3F,UAAU,GAAGlC,QAAQ,CAACqG,cAAT,CAAwB,YAAxB,IAAwC5B,IAAI,CAACC,KAAL,CAAW1E,QAAQ,CAACqG,cAAT,CAAwB,YAAxB,EAAsCzD,KAAjD,CAAxC,GAAkG,EAArH;AACA,UAAMX,UAAU,GAAGjC,QAAQ,CAACqG,cAAT,CAAwB,YAAxB,IAAwC5B,IAAI,CAACC,KAAL,CAAW1E,QAAQ,CAACqG,cAAT,CAAwB,YAAxB,EAAsCzD,KAAjD,CAAxC,GAAkG,EAArH;AAEA,QAAI,CAACkF,SAAD,EAAYC,YAAZ,IAA4B5F,+CAAQ,CAAC,UAAD,CAAxC;;AAEA,aAAS6F,aAAT,CAAuBhH,CAAvB,EAAyB;AACrB,UAAIA,CAAC,CAACR,MAAF,CAASoC,KAAT,IAAkB,QAAtB,EAAgCmF,YAAY,CAAC,UAAD,CAAZ;AAChCE,MAAAA,WAAW;AACd;;AAED,WAAO,kIACH,kEAAC,gEAAD,QAEI;AAAK,eAAS,EAAC;AAAf,OACI;AAAI,eAAS,EAAC;AAAd,6BADJ,EAEI,kEAAC,8DAAD;AAAY,gBAAU,EAAG/F,UAAzB;AAAsC,gBAAU,EAAGD;AAAnD,MAFJ,CAFJ,EAOI;AAAK,WAAK,EAAC;AAAX,OACM6F,SAAS,IAAI,UAAb,GAA0B,kEAAC,sEAAD;AAAa,gBAAU,EAAG5F,UAA1B;AAAuC,cAAQ,EAAG+F;AAAlD,MAA1B,GACAH,SAAS,IAAI,MAAb,GAAsB,kEAAC,sEAAD;AAAa,gBAAU,EAAE7F,UAAzB;AAAqC,cAAQ,EAAGgG;AAAhD,MAAtB,GACAH,SAAS,IAAI,eAAb,GAA+B,kEAAC,2EAAD;AAAiB,cAAQ,EAAGG;AAA5B,MAA/B,GACA,kEAAC,mEAAD;AAAU,cAAQ,EAAGA;AAArB,MAJN,CAPJ,EAcI;AAAQ,QAAE,EAAC,qBAAX;AAAiC,eAAS,EAAC,0BAA3C;AAAsE,WAAK,EAAGH,SAA9E;AAA0F,cAAQ,EAAG9G,CAAC;AAAA;;AAAA,eAAK+G,YAAY,cAAE/G,CAAC,CAACR,MAAJ,8CAAE,UAAUoC,KAAZ,CAAjB;AAAA;AAAtG,OACI;AAAQ,WAAK,EAAC;AAAd,kBADJ,EAEI;AAAQ,WAAK,EAAC;AAAd,kBAFJ,EAGI;AAAQ,WAAK,EAAC;AAAd,uBAHJ,EAII;AAAQ,WAAK,EAAC;AAAd,eAJJ,CAdJ,EAqBI;AAAK,eAAS,EAAC;AAAf,OACI;AAAO,UAAI,EAAC,QAAZ;AAAqB,WAAK,EAAC,SAA3B;AAAqC,QAAE,EAAC,kBAAxC;AAA2D,aAAO,EAAGoF;AAArE,MADJ,CArBJ,EAyBI;AAAO,UAAI,EAAC,YAAZ;AAAyB,QAAE,EAAC,iBAA5B;AAA8C,UAAI,EAAC,MAAnD;AAA0D,YAAM,MAAhE;AAAiE,WAAK,EAAC;AAAvE,MAzBJ,CADG,CAAP;AA8BH;;AAED,MAAGhI,QAAQ,CAACqG,cAAT,CAAwB,0BAAxB,CAAH,EAAwD6B,QAAQ,CAACC,MAAT,CAAgB,kEAAC,GAAD,OAAhB,EAAyBnI,QAAQ,CAACqG,cAAT,CAAwB,0BAAxB,CAAzB;AAExD,QAAM+B,gBAAgB,GAAGpI,QAAQ,CAACM,aAAT,CAAuB,2BAAvB,CAAzB;AACA,QAAM+H,cAAc,GAAGrI,QAAQ,CAACM,aAAT,CAAuB,iCAAvB,CAAvB;AACA,QAAMgI,gBAAgB,GAAGtI,QAAQ,CAACM,aAAT,CAAuB,mBAAvB,CAAzB;AAEA,MAAG+H,cAAH,EAAmBA,cAAc,CAACxH,KAAf,CAAqB0G,OAArB,GAA+B,MAA/B;AACnB,MAAGa,gBAAH,EAAqBA,gBAAgB,CAACvH,KAAjB,CAAuB0G,OAAvB,GAAiC,OAAjC;;AAErB,WAASU,WAAT,GAAuB;AAEnBI,IAAAA,cAAc,CAACxH,KAAf,CAAqB0G,OAArB,GAA+Bc,cAAc,CAACxH,KAAf,CAAqB0G,OAArB,IAAgC,MAAhC,GAAyC,OAAzC,GAAmD,MAAlF;AACAa,IAAAA,gBAAgB,CAACvH,KAAjB,CAAuB0G,OAAvB,GAAiCa,gBAAgB,CAACvH,KAAjB,CAAuB0G,OAAvB,IAAkC,MAAlC,GAA2C,OAA3C,GAAqD,MAAtF;AACAe,IAAAA,gBAAgB,CAAC1F,KAAjB,GAAyB0F,gBAAgB,CAAC1F,KAAjB,IAA0B,SAA1B,GAAsC,QAAtC,GAAiD,SAA1E,CAJmB,CAMnB;;AACA5C,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,sBAA1B,EAAkDC,OAAlD,CAA0DqI,OAAO,IAAI;AAEjEA,MAAAA,OAAO,CAACtI,gBAAR,CAAyB,kBAAzB,EAA6CC,OAA7C,CAAsDqI,OAAO,IAAI;AAAEA,QAAAA,OAAO,CAAC3F,KAAR,GAAgB,EAAhB;AAAoB,OAAvF;AACA2F,MAAAA,OAAO,CAACtI,gBAAR,CAAyB,QAAzB,EAAmCC,OAAnC,CAA4CqI,OAAO,IAAI;AAAEA,QAAAA,OAAO,CAACC,aAAR,GAAwB,CAAxB;AAA2B,OAApF,EAHiE,CAKjE;AACA;AACH,KAPD;AASH;AACJ,CAvED,E","sources":["webpack://metaxonomyv1.3/./src/components/fieldsList.js","webpack://metaxonomyv1.3/./src/components/forms/add-group.js","webpack://metaxonomyv1.3/./src/components/forms/add-metadata.js","webpack://metaxonomyv1.3/./src/components/forms/add-product-title.js","webpack://metaxonomyv1.3/./src/components/forms/add-taxonomy.js","webpack://metaxonomyv1.3/./src/components/forms/edit-group.js","webpack://metaxonomyv1.3/./src/components/forms/edit-meta.js","webpack://metaxonomyv1.3/./src/components/forms/edit-taxonomy.js","webpack://metaxonomyv1.3/./src/context/AppReducer.js","webpack://metaxonomyv1.3/./src/context/GlobalState.js","webpack://metaxonomyv1.3/./src/css/app.css?ee8b","webpack://metaxonomyv1.3/./src/css/card.css?5640","webpack://metaxonomyv1.3/./src/css/draggable-list.css?47e0","webpack://metaxonomyv1.3/external window \"React\"","webpack://metaxonomyv1.3/external window [\"wp\",\"element\"]","webpack://metaxonomyv1.3/webpack/bootstrap","webpack://metaxonomyv1.3/webpack/runtime/compat get default export","webpack://metaxonomyv1.3/webpack/runtime/define property getters","webpack://metaxonomyv1.3/webpack/runtime/hasOwnProperty shorthand","webpack://metaxonomyv1.3/webpack/runtime/make namespace object","webpack://metaxonomyv1.3/./src/index.js"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport { useGlobalContext, useUpdateContext } from '../context/GlobalState'\r\nimport EditGroup from './forms/edit-group'\r\nimport EditTanonomy from './forms/edit-taxonomy'\r\nimport EditMeta from './forms/edit-meta'\r\n\r\nexport const FieldsList = props => {\r\n\r\n    const dragFieldIndex = useRef()\r\n    const { fields, toggleForm } = useGlobalContext()\r\n    const { switchFields, getGroupIndex } = useUpdateContext()\r\n\r\n    const handleDragStart = () => {\r\n      document.querySelectorAll('.metaxonomy__card__head').forEach(card => {\r\n        if (card.classList.contains('open') && card.querySelector('.metaxonomy__card__type').textContent !== 'group') toggleForm( { target: card } )\r\n      })\r\n    }\r\n    \r\n    const handleDragEnter = index => {\r\n      dragFieldIndex.current = index\r\n      document.querySelectorAll(`.metaxonomy__card__head`).forEach(cardHead => { cardHead.style.backgroundColor = '#f1f1f1' })\r\n      document.querySelector(`.metaxonomy__draggable-list__item:nth-child(${ index + 2 }) .metaxonomy__card__head`).style.backgroundColor = '#ccc'\r\n    }\r\n\r\n    const handleDragEnd = ( e, index ) => {\r\n\r\n      const parentGroupCard = e.target.parentElement.parentElement.parentElement.parentElement.parentElement\r\n      const currentCard = document.querySelector(`.metaxonomy__draggable-list__item:nth-child(${ dragFieldIndex.current + 2 })`)\r\n      const params = {\r\n        fromGrpIndex: getGroupIndex(),\r\n        fromGrp: parentGroupCard.classList.contains('metaxonomy__draggable-list__item') ? parentGroupCard.querySelector('.metaxonomy__card__remove span').textContent : null,\r\n        toGrp: currentCard.querySelector(`.metaxonomy__card__type`).textContent === 'group' ? currentCard.querySelector(`.metaxonomy__card__remove span`).textContent : null,\r\n        fromFieldId: parentGroupCard.classList.contains('metaxonomy__draggable-list__item') ? e.target.querySelector('.metaxonomy__card__remove span').textContent : null,\r\n        fromFieldIndex: index,\r\n        toFieldIndex: dragFieldIndex.current\r\n      }\r\n\r\n      if (params.toFieldIndex !== index) {\r\n        if (currentCard.querySelector(`.metaxonomy__card__type`).textContent == 'group' && e.target.querySelector(`.metaxonomy__card__type`).textContent == 'group')\r\n          alert(`Sorry! Can't nest a group inside another !!! :(`)\r\n        else switchFields( params )\r\n      }\r\n\r\n      document.querySelectorAll(`.metaxonomy__card__head`).forEach(cardHead => { cardHead.style.backgroundColor = '#f1f1f1' })\r\n    }\r\n\r\n    return (\r\n        \r\n      <React.Fragment>\r\n\r\n        {fields.length > 0 ? (\r\n      \r\n          fields.map((field, index) => (\r\n              <div \r\n                key={field.id} \r\n                className=\"metaxonomy__draggable-list__item\"\r\n                draggable\r\n                onDragStart={() => handleDragStart() }\r\n                onDragEnter={() => handleDragEnter( index ) }\r\n                onDragEnd={e => handleDragEnd( e, index ) }\r\n              >\r\n                { field.type === 'meta' ? (<EditMeta metaFields={ props.metaFields } id={ field.id } index={ index } />) : \r\n                  field.type === 'group' ? (<EditGroup metaFields={ props.metaFields } taxonomies={ props.taxonomies } id={ field.id } grpIndex={ index } />) : \r\n                  (<EditTanonomy taxonomies={ props.taxonomies } id={ field.id } index={ index } />) }\r\n              </div>\r\n          ))\r\n\r\n        ) : (\r\n          <p className=\"\">No fields to show.</p>\r\n        )}\r\n\r\n      </React.Fragment> \r\n    )\r\n  \r\n}","import React, { useState } from 'react'\r\nimport { useUpdateContext } from '../../context/GlobalState'\r\n\r\nfunction AddGroup (props) {\r\n\r\n    const { addField, getMaxId, getLastOrder } = useUpdateContext()\r\n\r\n    let [dataState, setDataState] = useState({\r\n        \"id\": getMaxId(),\r\n        \"name\": \"\", // required\r\n        \"type\": \"group\",\r\n        \"description\": \"\", // optional\r\n        \"order\": getLastOrder(),\r\n        \"fields\": []\r\n    })\r\n    \r\n    function handleInputChange(e) {\r\n        setDataState( e.target.name === 'name' ? { ...dataState, id: getMaxId(), name: e.target.value } : { ...dataState, description: e.target.value } )\r\n    }\r\n    \r\n    function addNewField(e) {\r\n        e.preventDefault()\r\n        addField(dataState)\r\n        props.onSubmit()\r\n    }\r\n\r\n    return <>\r\n\r\n        <div className=\"metaxonomy__card__head\">\r\n            <i className=\"dashicons dashicons-arrow-right-alt2\"></i>\r\n            <div className=\"metaxonomy__card__type\">\r\n                {dataState.type}\r\n            </div>\r\n            <div className=\"metaxonomy__card__name\">\r\n                {dataState.name}\r\n            </div>\r\n        </div>\r\n        \r\n        <form action=\"#\" onSubmit={ addNewField } className=\"metaxonomy__container new-field-container\">\r\n\r\n            <div className=\"metaxonomy__fields\">\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Name</div>\r\n                    <div className=\"metaxonomy__name__input\">\r\n                        <input type=\"text\" name=\"name\" value={dataState.name} onChange={handleInputChange.bind(this)} required />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Description</div>\r\n                    <div className=\"metaxonomy__description__input\">\r\n                        <input type=\"text\" name=\"description\" value={dataState.description} onChange={handleInputChange.bind(this)} />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"metaxonomy__savechanges-button\">\r\n                <input type=\"submit\" value=\"Add\" />\r\n            </div>\r\n\r\n        </form>\r\n    </>\r\n}\r\n\r\n\r\nexport default AddGroup\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useUpdateContext } from '../../context/GlobalState'\r\n\r\nfunction AddMetaData (props) {\r\n\r\n    const { addField, getMaxId, getLastOrder } = useUpdateContext()\r\n\r\n    let [dataState, setDataState] = useState({\r\n        \"id\": getMaxId(),\r\n        \"name\": \"\", // required\r\n        \"type\": \"meta\",\r\n        \"key\": \"\", // required\r\n        \"keyType\": \"\", // needs a way of entry\r\n        \"description\": \"\", // optional\r\n        \"order\": getLastOrder(),\r\n        \"displayType\": \"\", // select option\r\n        \"placeholder\": \"\", // needs a way of entry\r\n        \"defaultValue\": \"\", // needs a way of entry\r\n        \"selectOptions\": {\r\n        } // improted later in php code\r\n    })\r\n\r\n    function handleInputChange(e) {\r\n        setDataState(\r\n            (e.target.name === 'name') ? {...dataState, id: getMaxId(), name: e.target.value} : \r\n            (e.target.name === 'description') ? {...dataState, description: e.target.value} :\r\n            {...dataState, key: e.target.value.replace(/[^a-z]/g, '')}\r\n        )\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setDataState( e.target.name === 'key' ? {...dataState, key: e.target.value/* .replace(/[^a-z]/g, '') */} : {...dataState, displayType: e.target.value} )\r\n    }\r\n\r\n    function addNewField(e) {\r\n        e.preventDefault()\r\n        dataState.key = dataState.key === \"\" ? document.querySelector('.new-field-container select[name=key] option')?.value : dataState.key\r\n        dataState.displayType = dataState.displayType === \"\" ? document.querySelector('.new-field-container select[name=dtype] option')?.value : dataState.displayType\r\n        addField(dataState)\r\n        props.onSubmit()\r\n    }\r\n\r\n    return <>\r\n\r\n        <form action=\"#\" onSubmit={ addNewField } className=\"add-new-metaxonomy-placeholder\">\r\n        \r\n            <div className=\"metaxonomy__card__head\">\r\n                <i className=\"dashicons dashicons-arrow-right-alt2\"></i>\r\n                <div className=\"metaxonomy__card__type\">\r\n                    {dataState.type}\r\n                </div>\r\n                <div className=\"metaxonomy__card__name\">\r\n                    {dataState.name}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"metaxonomy__container new-field-container\">\r\n\r\n                <div className=\"metaxonomy__pt__fields\">\r\n\r\n                    <div className=\"metaxonomy__field\">\r\n                        <div className=\"metaxonomy__field__label\">Key</div>\r\n                        {dataState.displayType == 'range' ? (\r\n                            <select name=\"key\" value={dataState.key} onChange={handleChange}>\r\n                                { props.metaFields.map(metaField => <option value={ metaField.value }>{ metaField.name } ({ metaField.value })</option>) }\r\n                            </select>\r\n                        ) : (\r\n                            <div className=\"metaxonomy__key__input\">\r\n                                <input type=\"text\" name=\"key\" value={dataState.key} onChange={handleInputChange.bind(this)} required />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"metaxonomy__field\">\r\n                        <div className=\"metaxonomy__field__label\">Name</div>\r\n                        <div className=\"metaxonomy__name__input\">\r\n                            <input type=\"text\" name=\"name\" value={dataState.name} onChange={handleInputChange.bind(this)} required />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"metaxonomy__field\">\r\n                        <div className=\"metaxonomy__field__label\">Display Type</div>\r\n                        <div className=\"metaxonomy__dtype__input\">\r\n                            <select name=\"dtype\" value={dataState.displayType} onChange={handleChange}>\r\n                                <option value=\"text\">Text</option>\r\n                                <option value=\"autocomplete\">Auto Complete</option>\r\n                                <option value=\"select\">Select</option>\r\n                                <option value=\"range\">Range min/max</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"metaxonomy__field\">\r\n                        <div className=\"metaxonomy__field__label\">Description</div>\r\n                        <div className=\"metaxonomy__description__input\">\r\n                            <input type=\"text\" name=\"description\" value={dataState.description} onChange={handleInputChange.bind(this)} />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n        \r\n            </div>\r\n\r\n            <div className=\"metaxonomy__savechanges-button\">\r\n                <input type=\"submit\" value=\"Add\" />\r\n            </div>\r\n        \r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default AddMetaData","import { React, useState } from 'react'\r\nimport { useUpdateContext } from '../../context/GlobalState'\r\n\r\nfunction AddProductTitle (props) {\r\n\r\n    const { addField, getMaxId, getLastOrder } = useUpdateContext()\r\n\r\n    let [dataState, setDataState] = useState({\r\n        \"id\": getMaxId(),\r\n        \"name\": \"\", // required\r\n        \"type\": \"product_title\",\r\n        \"description\": \"\", // optional\r\n        \"key\": \"\", // required\r\n        \"keyType\": \"\", // sneeds a way of entry\r\n        \"order\": getLastOrder(),\r\n        \"displayType\": \"\" // select option\r\n    })\r\n    \r\n    function handleInputChange(e) {\r\n        setDataState(\r\n            (e.target.name === 'name') ? {...dataState, id: getMaxId(), name: e.target.value} : \r\n            (e.target.name === 'description') ? {...dataState, description: e.target.value} :\r\n            {...dataState, key: e.target.value.replace(/[^a-z]/g, '')}\r\n        )\r\n    }\r\n    \r\n   \r\n    function handleChange(e) {\r\n        setDataState( {...dataState, displayType: e.target.value} )\r\n    }\r\n\r\n    function addNewField(e) {\r\n        e.preventDefault()\r\n        dataState.keyType = dataState.keyType === \"\" ? document.querySelector('.new-field-container select[name=ktype] option')?.value : dataState.keyType\r\n        dataState.displayType = dataState.displayType === \"\" ? document.querySelector('.new-field-container select[name=dtype] option')?.value : dataState.displayType\r\n        addField(dataState)\r\n        props.onSubmit()\r\n    }\r\n\r\n    return <>\r\n\r\n        <div className=\"metaxonomy__card__head\">\r\n            <i className=\"dashicons dashicons-arrow-right-alt2\"></i>\r\n            <div className=\"metaxonomy__card__type\">\r\n                {dataState.type}\r\n            </div>\r\n            <div className=\"metaxonomy__card__name\">\r\n                {dataState.name}\r\n            </div>\r\n        </div>\r\n        \r\n        <form action=\"#\" onSubmit={ addNewField } className=\"metaxonomy__container new-field-container\">\r\n\r\n            <div className=\"metaxonomy__fields\">\r\n \r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Key</div>\r\n                    <div className=\"metaxonomy__key__input\">\r\n                        <input type=\"text\" name=\"key\" value={dataState.key} onChange={handleInputChange.bind(this)} required />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Name</div>\r\n                    <div className=\"metaxonomy__name__input\">\r\n                        <input type=\"text\" name=\"name\" value={dataState.name} onChange={handleInputChange.bind(this)} required />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Display Type</div>\r\n                    <div className=\"metaxonomy__dtype__input\">\r\n                        <select name=\"dtype\" value={dataState.displayType} onChange={handleChange}>\r\n                            <option value=\"text\">Text</option>\r\n                            <option value=\"select\">Select</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Description</div>\r\n                    <div className=\"metaxonomy__description__input\">\r\n                        <input type=\"text\" name=\"description\" value={dataState.description} onChange={handleInputChange.bind(this)} />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"metaxonomy__savechanges-button\">\r\n                <input type=\"submit\" value=\"Add\" />\r\n            </div>\r\n\r\n        </form>\r\n        \r\n    </>\r\n}\r\n\r\nexport default AddProductTitle","import React, { useState } from 'react'\r\nimport { useUpdateContext } from '../../context/GlobalState'\r\n\r\nfunction AddTaxonomy (props) {\r\n\r\n    const { addField, getMaxId, getLastOrder } = useUpdateContext()\r\n\r\n    let [dataState, setDataState] = useState({\r\n        \"id\": getMaxId(),\r\n        \"taxonomy\": \"\", // select option\r\n        \"name\": \"\", // required\r\n        \"type\": \"taxonomy\",\r\n        \"key\": \"\", // dont need it\r\n        \"keyType\": \"\", // needs a way of entry\r\n        \"description\": \"\", // optional\r\n        \"order\": getLastOrder(),\r\n        \"displayType\": \"\", // select option\r\n        \"defaultValue\": \"\", // needs a way of entry\r\n        \"selectOptions\": {\r\n        } // improted later in php code\r\n    })\r\n    \r\n    function handleInputChange(e) {\r\n        setDataState( e.target.name === 'name' ? {...dataState, id: getMaxId(), name: e.target.value} : {...dataState, description: e.target.value})\r\n    }\r\n   \r\n    function handleChange(e) {\r\n        setDataState( e.target.name === 'taxonomy' ? {...dataState, taxonomy: e.target.value} : {...dataState, displayType: e.target.value})\r\n    }\r\n\r\n    function addNewField(e) {\r\n        e.preventDefault()\r\n        dataState.taxonomy = dataState.taxonomy === \"\" ? document.querySelector('.new-field-container select[name=taxonomy] option')?.value : dataState.taxonomy\r\n        dataState.displayType = dataState.displayType === \"\" ? document.querySelector('.new-field-container select[name=dtype] option')?.value : dataState.displayType\r\n        addField(dataState)\r\n        props.onSubmit()\r\n    }\r\n\r\n    return <>\r\n\r\n        <div className=\"metaxonomy__card__head\">\r\n            <i className=\"dashicons dashicons-arrow-right-alt2\"></i>\r\n            <div className=\"metaxonomy__card__type\">\r\n                {dataState.type}\r\n            </div>\r\n            <div className=\"metaxonomy__card__name\">\r\n                {dataState.name}\r\n            </div>\r\n        </div>\r\n        \r\n        <form action=\"#\" onSubmit={ addNewField } className=\"metaxonomy__container new-field-container\">\r\n\r\n            <div className=\"metaxonomy__fields\">\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Taxonomy</div>\r\n                    <div className=\"metaxonomy__taxonomy__input\">\r\n                        <select name=\"taxonomy\" value={dataState.taxonomy} onChange={handleChange}>\r\n                            { props.taxonomies.map(taxonomy => <option value={ taxonomy.value }>{ taxonomy.name } ({ taxonomy.value })</option>) }\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Name</div>\r\n                    <div className=\"metaxonomy__name__input\">\r\n                        <input type=\"text\" name=\"name\" value={dataState.name} onChange={handleInputChange.bind(this)} required />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Display Type</div>\r\n                    <div className=\"metaxonomy__dtype__input\">\r\n                        <select name=\"dtype\" value={dataState.displayType} onChange={handleChange}>\r\n                            <option value=\"text\">Text</option>\r\n                            <option value=\"select\">Select</option>\r\n                            <option value=\"select2\">Select 2</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Description</div>\r\n                    <div className=\"metaxonomy__description__input\">\r\n                        <input type=\"text\" name=\"description\" value={dataState.description} onChange={handleInputChange.bind(this)} />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"metaxonomy__savechanges-button\">\r\n                <input type=\"submit\" value=\"Add\" />\r\n            </div>\r\n\r\n        </form>\r\n        \r\n    </>\r\n}\r\n\r\n\r\nexport default AddTaxonomy\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { useGlobalContext, useUpdateContext } from '../../context/GlobalState'\r\n\r\nimport EditTanonomy from './edit-taxonomy'\r\nimport EditMeta from './edit-meta'\r\n\r\nfunction EditGroup ( { id, grpIndex, metaFields, taxonomies } ) {\r\n\r\n    const { fields, toggleForm } = useGlobalContext()\r\n    const { editField, switchFields, setGroupIndex } = useUpdateContext()\r\n    const dragField = useRef()\r\n\r\n    let [dataState, setDataState] = useState(fields.filter(group => group.id == id)[0])\r\n    let groupFields = fields.filter(group => group.id == id)[0].fields\r\n    \r\n    useEffect(() => {\r\n        editField(dataState)\r\n    }, [dataState])\r\n\r\n    function handleInputChange(e) {\r\n        if ( e.target.name === 'name' ) {\r\n            const cardHead = e.target.parentElement.parentElement.parentElement.parentElement.parentElement.querySelector('.metaxonomy__card__head')\r\n            cardHead.style.backgroundColor = e.target.value == '' ? '#b32d2e' : '#f1f1f1'\r\n        }\r\n        setDataState( e.target.name === 'name' ? {...dataState, name: e.target.value} : {...dataState, description: e.target.value})\r\n    }\r\n\r\n    const handleDragEnter = index => {\r\n        dragField.current = index\r\n    }\r\n\r\n    const handleDragEnd = (grpId, index) => {\r\n\r\n        const params = {\r\n            fromGrp: grpId,\r\n            toGrp: grpId,\r\n            fromFieldId: null,\r\n            fromFieldIndex: index,\r\n            toFieldIndex: dragField.current,\r\n            grpIndex: grpIndex\r\n        }\r\n        setGroupIndex(grpIndex)\r\n        if (dragField.current !== index) switchFields( params )\r\n    }\r\n\r\n    return <>\r\n\r\n        <div className=\"metaxonomy__card__head\" onClick={ toggleForm }>\r\n            <i className=\"dashicons dashicons-arrow-right-alt2\"></i>\r\n            <div className=\"metaxonomy__card__type\">\r\n                {dataState.type}\r\n            </div>\r\n            <div className=\"metaxonomy__card__name\">\r\n                {dataState.name}\r\n            </div>\r\n            <div className=\"metaxonomy__card__remove\">\r\n                <span name=\"id\" hidden>{ dataState.id }</span>\r\n                <span name=\"index\" hidden>{ grpIndex }</span>\r\n                <i className=\"dashicons dashicons-trash\"></i>\r\n            </div>\r\n        </div>\r\n        \r\n        <div className=\"metaxonomy__container\">\r\n\r\n            <div className=\"metaxonomy__fields\">\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Name</div>\r\n                    <div className=\"metaxonomy__name__input\">\r\n                        <input type=\"text\" name=\"name\" value={dataState.name} onChange={handleInputChange.bind(this)} placeholder=\"Name required\" required />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Description</div>\r\n                    <div className=\"metaxonomy__description__input\">\r\n                        <input type=\"text\" name=\"description\" value={dataState.description} onChange={handleInputChange.bind(this)} />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"metaxonomy__field group\">\r\n                    <div className=\"metaxonomy__field__label\">Fields</div>\r\n                    <div className=\"metaxonomy__field__list group\">\r\n                        { groupFields.length > 0 ? (\r\n                            groupFields.map(( field, index ) => (\r\n                                <div \r\n                                    key={field.id} \r\n                                    className=\"metaxonomy__draggable-list__item\"\r\n                                    draggable\r\n                                    onDragEnter={ () => { handleDragEnter( index ) } }\r\n                                    onDragEnd={ () => handleDragEnd( dataState.id, index ) }\r\n                                >\r\n                                    { field.type === 'meta' ? (<EditMeta metaFields={ metaFields } groupId={ id } id={ field.id } index={ index }/>) : \r\n                                    (<EditTanonomy taxonomies={ taxonomies } groupId={ id } id={ field.id } index={ index }/>) }\r\n                                </div>\r\n                            ))\r\n                        ) : (\r\n                            <p className=\"\">No fields to show.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\nexport default EditGroup","import React, { useState, useEffect } from 'react'\r\nimport { useGlobalContext, useUpdateContext } from '../../context/GlobalState'\r\n\r\nfunction EditMeta ( { id, index, groupId, metaFields } ) {\r\n\r\n    const { fields, toggleForm } = useGlobalContext()\r\n    const { editField } = useUpdateContext()\r\n\r\n    let field = groupId ? fields.filter(group => group.id === groupId)[0].fields.filter(field => field.id === id)[0] : fields.filter(field => field.id === id)[0]\r\n    let [dataState, setDataState] = useState(field)\r\n    \r\n    function handleInputChange(e) {\r\n        if ( e.target.name === 'name' || e.target.name === 'key' ) {\r\n            const cardHead = e.target.parentElement.parentElement.parentElement.parentElement.parentElement.querySelector('.metaxonomy__card__head')\r\n            cardHead.style.backgroundColor = e.target.value == '' ? '#b32d2e' : '#f1f1f1'\r\n        }\r\n        setDataState(\r\n            e.target.name === 'name' ? {...dataState, name: e.target.value} : \r\n            e.target.name === 'description' ? {...dataState, description: e.target.value} :\r\n            {...dataState, key: e.target.value.replace(/[^a-z]/g, '')}\r\n        )\r\n    }\r\n\r\n    function handleChange(e) {\r\n        e.target.parentElement.parentElement.parentElement.parentElement.parentElement.querySelector('.metaxonomy__card__head').style.backgroundColor = \r\n        e.target.name === 'dtype' && e.target.value === 'range' ? '#f1f1f1' : '#b32d2e'\r\n        setDataState( e.target.name === 'key' ? {...dataState, key: e.target.value} : {...dataState, displayType: e.target.value} )\r\n    }\r\n\r\n    useEffect(() => {\r\n        editField(dataState)\r\n    }, [dataState])\r\n\r\n    return <>\r\n\r\n        <div className=\"metaxonomy__card__head\" onClick={toggleForm}>\r\n            <i className=\"dashicons dashicons-arrow-right-alt2\"></i>\r\n            <div className=\"metaxonomy__card__type\">\r\n                {dataState.type}\r\n            </div>\r\n            <div className=\"metaxonomy__card__name\">\r\n                {dataState.name}\r\n            </div>\r\n            <div className=\"metaxonomy__card__remove\">\r\n                <span name=\"id\" hidden>{ dataState.id }</span>\r\n                <span name=\"index\" hidden>{ index }</span>\r\n                <i className=\"dashicons dashicons-trash\"></i>\r\n            </div>\r\n        </div>\r\n        \r\n        <div className=\"metaxonomy__container\">\r\n\r\n            <div className=\"metaxonomy__pt__fields\">\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Key</div>\r\n                    {dataState.displayType == 'range' ? (\r\n                        <select name=\"key\" value={dataState.key} onChange={handleChange}>\r\n                            { metaFields.map(metaField => <option value={ metaField.value }>{ metaField.name } ({ metaField.value })</option>) }\r\n                        </select>\r\n                    ) : (\r\n                        <div className=\"metaxonomy__key__input\">\r\n                            <input type=\"text\" name=\"key\" value={dataState.key} onChange={handleInputChange.bind(this)} placeholder=\"Key required\" required />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Name</div>\r\n                    <div className=\"metaxonomy__name__input\">\r\n                        <input type=\"text\" name=\"name\" value={dataState.name} onChange={handleInputChange.bind(this)} placeholder=\"Name required\" required />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Display Type</div>\r\n                    <div className=\"metaxonomy__dtype__input\">\r\n                        <select name=\"dtype\" value={dataState.displayType} onChange={handleChange}>\r\n                            <option value=\"text\">Text</option>\r\n                            <option value=\"autocomplete\">Auto Complete</option>\r\n                            <option value=\"select\">Select</option>\r\n                            <option value=\"range\">Range min/max</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Description</div>\r\n                    <div className=\"metaxonomy__description__input\">\r\n                        <input type=\"text\" name=\"description\" value={dataState.description} onChange={handleInputChange.bind(this)} />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\nexport default EditMeta","import React, { useState, useEffect } from 'react'\r\nimport { useGlobalContext, useUpdateContext } from '../../context/GlobalState'\r\n\r\nfunction EditTanonomy ( { id, index, groupId, taxonomies} ) {\r\n\r\n    const { fields, toggleForm } = useGlobalContext()\r\n    const { editField } = useUpdateContext()\r\n    \r\n    let field = groupId ? fields.filter(group => group.id === groupId)[0].fields.filter(field => field.id === id)[0] : fields.filter(field => field.id === id)[0]\r\n    let [dataState, setDataState] = useState(field)\r\n\r\n    useEffect(() => {\r\n        editField(dataState)\r\n    }, [dataState])\r\n\r\n    function handleInputChange(e) {\r\n        if ( e.target.name === 'name' ) {\r\n            const cardHead = e.target.parentElement.parentElement.parentElement.parentElement.parentElement.querySelector('.metaxonomy__card__head')\r\n            cardHead.style.backgroundColor = e.target.value == '' ? '#b32d2e' : '#f1f1f1'\r\n        }\r\n        setDataState( e.target.name === 'name' ? {...dataState, name: e.target.value} : {...dataState, description: e.target.value})\r\n    }\r\n   \r\n    function handleChange(e) {\r\n        setDataState( e.target.name === 'taxonomy' ? {...dataState, taxonomy: e.target.value} : {...dataState, displayType: e.target.value})\r\n    }\r\n\r\n    return <>\r\n\r\n        <div className=\"metaxonomy__card__head\" onClick={toggleForm}>\r\n            <i className=\"dashicons dashicons-arrow-right-alt2\"></i>\r\n            <div className=\"metaxonomy__card__type\">\r\n                {dataState.type}\r\n            </div>\r\n            <div className=\"metaxonomy__card__name\">\r\n                {dataState.name}\r\n            </div>\r\n            <div className=\"metaxonomy__card__remove\">\r\n                <span name=\"id\" hidden>{ dataState.id }</span>\r\n                <span name=\"index\" hidden>{ index }</span>\r\n                <i className=\"dashicons dashicons-trash\"></i>\r\n            </div>\r\n        </div>\r\n        \r\n        <div className=\"metaxonomy__container\">\r\n\r\n            <div className=\"metaxonomy__fields\">\r\n                \r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Taxonomy</div>\r\n                    <div className=\"metaxonomy__taxonomy__input\">\r\n                        <select name=\"taxonomy\" value={dataState.taxonomy} onChange={handleChange}>\r\n                            { taxonomies.map(taxonomy => <option value={ taxonomy.value }>{ taxonomy.name } ({ taxonomy.value })</option>) }\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Name</div>\r\n                    <div className=\"metaxonomy__name__input\">\r\n                        <input type=\"text\" name=\"name\" value={dataState.name} onChange={handleInputChange.bind(this)} placeholder=\"Name required\" required />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Display Type</div>\r\n                    <div className=\"metaxonomy__dtype__input\">\r\n                        <select name=\"dtype\" value={dataState.displayType} onChange={handleChange}>\r\n                            <option value=\"text\">Text</option>\r\n                            <option value=\"select\">Select</option>\r\n                            <option value=\"select2\">Select 2</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"metaxonomy__field\">\r\n                    <div className=\"metaxonomy__field__label\">Description</div>\r\n                    <div className=\"metaxonomy__description__input\">\r\n                        <input type=\"text\" name=\"description\" value={dataState.description} onChange={handleInputChange.bind(this)} />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n\r\n        \r\n\r\n    </>\r\n}\r\n\r\nexport default EditTanonomy","export default function appReducer(state, action) {\r\n\r\n    let fields = JSON.parse(JSON.stringify(state.fields))\r\n\r\n    switch (action.type) {\r\n      case \"ADD_FIELD\":\r\n        return {\r\n          ...state,\r\n          fields: [...state.fields, action.payload]\r\n        }\r\n  \r\n      case \"EDIT_FIELD\":\r\n        const updatedField = action.payload\r\n  \r\n        const updatedFields = state.fields.map((field) => {\r\n          if (field.id === updatedField.id) {\r\n            return updatedField\r\n          }\r\n          return field\r\n        })\r\n  \r\n        return {\r\n          ...state,\r\n          fields: updatedFields,\r\n        }\r\n  \r\n      case \"REMOVE_FIELD\":\r\n\r\n        const grpIndex = action.payload.grpIndex\r\n        const fieldId = action.payload.fieldId\r\n        const group = fields.filter(group => group.id == action.payload.grpId)[0]\r\n        \r\n        fields = fields.filter(group => group.id != action.payload.grpId)\r\n        return action.payload.grpId ? {\r\n          ...state,\r\n          fields: [\r\n            ...fields.slice(0, grpIndex), \r\n            { ...group, fields: group.fields.filter(field => field.id != fieldId)},\r\n            ...fields.slice(grpIndex, fields.length)\r\n          ]\r\n        } : {\r\n          ...state,\r\n          fields: state.fields.filter(\r\n            field => field.id !== action.payload.fieldId\r\n          )\r\n        }\r\n  \r\n      case \"SWITCH_FIELDS\":\r\n        \r\n        let newState\r\n\r\n        const fromGrp = action.payload.fromGrp\r\n        const fromGrpIndex = action.payload.fromGrpIndex\r\n        const toGrp = action.payload.toGrp\r\n        const fromFieldIndex = action.payload.fromFieldIndex\r\n        const fromFieldId = action.payload.fromFieldId\r\n        const toFieldIndex = action.payload.toFieldIndex\r\n        const dragedField = fields[fromFieldIndex]\r\n\r\n        if ( fromGrp ) {\r\n          const fromGroup = fields.filter(group => group.id == fromGrp)[0]\r\n          if ( toGrp ) {\r\n            const toGroup = fields.filter(group => group.id == toGrp)[0]\r\n            if ( fromGrp == toGrp ) {\r\n              // switch inside same group\r\n              const grpIndex = action.payload.grpIndex\r\n              console.log(`switch inside same group ${toGrp} with index ${grpIndex} from ${fromFieldIndex} to ${toFieldIndex}`)\r\n\r\n              const dragedGroupField = toGroup.fields[fromFieldIndex]\r\n\r\n              toGroup.fields.splice(fromFieldIndex, 1)\r\n\r\n              fields = fields.filter(group => group.id != toGrp)\r\n              toGroup.fields = toGroup.fields.filter(field => field.id != dragedField.id)\r\n\r\n              const GroupFields = [\r\n                ...toGroup.fields.slice(0, toFieldIndex), \r\n                { ...dragedGroupField, order: ( toFieldIndex + 1 ).toString()},\r\n                ...toGroup.fields.slice(toFieldIndex, toGroup.fields.length)\r\n              ]\r\n  \r\n              const switched = [\r\n                ...fields.slice(0, grpIndex), \r\n                { ...toGroup, fields: GroupFields, order: ( grpIndex + 1 ).toString()},\r\n                ...fields.slice(grpIndex, fields.length)\r\n              ]\r\n\r\n              newState = {\r\n                ...state,\r\n                fields: switched\r\n              }\r\n            } else {\r\n              // from group to another group\r\n              console.log(`${fromFieldId} from group ${fromGrp} to group ${toGrp}`)\r\n\r\n              const dragedGroupField = fromGroup.fields.filter(field => field.id == fromFieldId)[0]\r\n              const fromGroupFields = [\r\n                ...fromGroup.fields.filter(\r\n                  (field) => field.id !== fromFieldId\r\n                )\r\n              ]\r\n              const toGroupFields = [\r\n                ...toGroup.fields,\r\n                { ...dragedGroupField, order: ( toGroup.fields.length + 1 ).toString() }\r\n              ]\r\n\r\n              fields = fields.filter(group => group.id != fromGrp && group.id != toGrp)\r\n              const switched = fromGrpIndex > toFieldIndex ? [\r\n                ...fields.slice(0, toFieldIndex),\r\n                { ...toGroup, fields: toGroupFields},\r\n                ...fields.slice(toFieldIndex, fromGrpIndex),\r\n                { ...fromGroup, fields: fromGroupFields},\r\n                ...fields.slice(fromGrpIndex, fields.length)\r\n              ] : [\r\n                ...fields.slice(0, fromGrpIndex),\r\n                { ...fromGroup, fields: fromGroupFields},\r\n                ...fields.slice(fromGrpIndex, toFieldIndex),\r\n                { ...toGroup, fields: toGroupFields},\r\n                ...fields.slice(toFieldIndex, fields.length)\r\n              ]\r\n\r\n              newState = {\r\n                ...state,\r\n                fields: switched\r\n              }\r\n            }\r\n            toGroup.fields.forEach((field, index) => {field.order = (index + 1).toString() })\r\n          } else {\r\n            // from group to the out\r\n            console.log(`${fromFieldId} from group ${fromGrp} to index ${toFieldIndex}`)\r\n\r\n            fields = fields.filter(group => group.id != fromGrp)\r\n\r\n            const dragedGroupField = fromGroup.fields.filter(field => field.id == fromFieldId)[0]\r\n            const GroupFields = [\r\n              ...fromGroup.fields.filter(\r\n                (field) => field.id !== fromFieldId\r\n              )\r\n            ]\r\n\r\n            const switched = toFieldIndex < fromGrpIndex ? [\r\n              ...fields.slice(0, toFieldIndex),\r\n              { ...dragedGroupField, order: (toFieldIndex + 1).toString() },\r\n              ...fields.slice(toFieldIndex, fromGrpIndex),\r\n              { ...fromGroup, fields: GroupFields},\r\n              ...fields.slice(fromGrpIndex, fields.length)\r\n            ] : [\r\n              ...fields.slice(0, fromGrpIndex),\r\n              { ...fromGroup, fields: GroupFields},\r\n              ...fields.slice(fromGrpIndex, toFieldIndex),\r\n              { ...dragedGroupField, order: (toFieldIndex + 1).toString() },\r\n              ...fields.slice(toFieldIndex, fields.length)\r\n            ]\r\n\r\n            newState = {\r\n              ...state,\r\n              fields: switched\r\n            }\r\n          }\r\n          fromGroup.fields.forEach((field, index) => {field.order = (index + 1).toString() })\r\n        } else {\r\n\r\n          const group = fields.filter(group => group.id == toGrp)[0]\r\n          \r\n          fields.splice(fromFieldIndex, 1)\r\n\r\n          if ( toGrp ) {\r\n            // normal field to a group\r\n            console.log(`normal field ${fromFieldIndex} to a group ${toGrp}`)\r\n\r\n            fields = fields.filter(group => group.id != toGrp)\r\n\r\n            const GroupFields = [\r\n              ...group.fields,\r\n              { ...dragedField, order: ( group.fields.length + 1 ).toString() }\r\n            ]\r\n\r\n            const switched = [\r\n              ...fields.slice(0, toFieldIndex), \r\n              { ...group, fields: GroupFields},\r\n              ...fields.slice(toFieldIndex, fields.length)\r\n            ]\r\n\r\n            group.fields.forEach((field, index) => {field.order = (index + 1).toString() })\r\n\r\n            newState = {\r\n              ...state,\r\n              fields: switched\r\n            }\r\n          } else {\r\n            // two normal fields out of group\r\n            console.log(`from field ${fromFieldIndex} to ${toFieldIndex}`)\r\n\r\n            const switched = [\r\n                ...fields.slice(0, toFieldIndex),\r\n                { ...dragedField, order: (toFieldIndex + 1).toString() },\r\n                ...fields.slice(toFieldIndex, fields.length)\r\n            ]\r\n\r\n            newState = {\r\n              ...state,\r\n              fields: switched\r\n            }\r\n          }\r\n        }\r\n\r\n        fields.forEach((field, index) => {field.order = (index >= toFieldIndex) ? (index + 2).toString() : (index + 1).toString() })\r\n\r\n        return newState\r\n  \r\n      default:\r\n        return state\r\n    }\r\n\r\n  }","import React, { createContext, useContext, useReducer, useEffect } from 'react'\r\n\r\nimport appReducer from './AppReducer'\r\n\r\nconst initialState = { fields: [] }\r\nlet interval = setInterval(() => {\r\n  if(document.getElementById('wdmp_search_filters')?.value) initialState.fields = JSON.parse(document.getElementById('wdmp_search_filters').value).searchfileds\r\n}, 0);\r\n\r\nconst GlobalContext = createContext(initialState)\r\nconst UpdateContext = createContext(initialState)\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n\r\n  const [state, dispatch] = useReducer(appReducer, initialState)\r\n  let groupIndex\r\n\r\n  function addField(field) {\r\n    dispatch({\r\n      type: \"ADD_FIELD\",\r\n      payload: field\r\n    })\r\n  }\r\n\r\n  function editField(field) {\r\n    dispatch({\r\n      type: \"EDIT_FIELD\",\r\n      payload: field\r\n    })\r\n  }\r\n\r\n  function removeField(params) {\r\n    dispatch({\r\n      type: \"REMOVE_FIELD\",\r\n      payload: params\r\n    })\r\n  }\r\n\r\n  function switchFields(params) {\r\n    dispatch({\r\n      type: \"SWITCH_FIELDS\",\r\n      payload: params\r\n    })\r\n  }\r\n\r\n  function getMaxId() {\r\n    let ids = state.fields.map(field => field.id)\r\n    state.fields.map(field => {\r\n      if ( field.type == \"group\" ) {\r\n        field.fields.map(field => ids.push(field.id))\r\n      } \r\n    })\r\n    return state.fields.length == 0 || isNaN(Math.max.apply(Math, ids)) ? '0' : (Math.max.apply(Math, ids) + 1).toString()\r\n  }\r\n\r\n  function getLastOrder() {\r\n    return (state.fields.length + 1).toString()\r\n  }\r\n\r\n  function toggleForm(e){\r\n\r\n    const form = e.target.classList.contains('metaxonomy__card__head') ? e.target.parentElement.querySelector('.metaxonomy__container') : e.target.parentElement.parentElement.querySelector('.metaxonomy__container')\r\n    const iconClass = e.target.classList.contains('metaxonomy__card__head') ? e.target.querySelector('i').classList : e.target.parentElement.querySelector('i').classList\r\n    if(e.target.parentElement.classList.contains('metaxonomy__card__remove')){\r\n      const params = {\r\n        grpIndex: e.target.parentElement.parentElement.parentElement.parentElement.classList.contains('group') ? e.target.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.querySelector('span[name=index]').innerText : null,\r\n        grpId: e.target.parentElement.parentElement.parentElement.parentElement.classList.contains('group') ? e.target.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.querySelector('span').innerText : null,\r\n        fieldId: e.target.parentElement.querySelector('span[name=id]').innerText\r\n      }\r\n      removeField( params )\r\n    } else {\r\n      if (iconClass.contains('dashicons-arrow-down-alt2')) {\r\n        form.style.display = 'none'\r\n        iconClass.add('dashicons-arrow-right-alt2')\r\n        iconClass.remove('dashicons-arrow-down-alt2')\r\n      } else {\r\n        form.style.display = 'block'\r\n        iconClass.add('dashicons-arrow-down-alt2')\r\n        iconClass.remove('dashicons-arrow-right-alt2')\r\n      }\r\n      form.parentElement.classList.toggle('open') // padding\r\n      form.parentElement.querySelector('.metaxonomy__card__head').classList.toggle('open')\r\n      form.parentElement.querySelector('.metaxonomy__card__type').classList.toggle('open')\r\n      form.parentElement.querySelector('.metaxonomy__card__name').classList.toggle('open')\r\n    }\r\n    \r\n  }\r\n\r\n  function getGroupIndex() { return groupIndex }\r\n\r\n  function setGroupIndex( index ) { groupIndex = index }\r\n\r\n  // update hidden input\r\n  useEffect(() => {\r\n    document.getElementById( 'wdmp_search_filters' ).value = JSON.stringify( { searchfileds: [...state.fields] } )\r\n    // console.log( { searchfileds: [...state.fields] } )\r\n    clearInterval(interval)\r\n  }, [state])\r\n  \r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{ fields: state.fields, toggleForm }}\r\n    >\r\n      <UpdateContext.Provider\r\n        value={{\r\n          addField,\r\n          editField,\r\n          removeField,\r\n          switchFields,\r\n          getMaxId,\r\n          getLastOrder,\r\n          getGroupIndex,\r\n          setGroupIndex\r\n        }}\r\n      >\r\n        {children}\r\n      </UpdateContext.Provider>\r\n    </GlobalContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useGlobalContext = () => useContext(GlobalContext)\r\nexport const useUpdateContext = () => useContext(UpdateContext)\r\n","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import React, { useState } from 'react'\r\nimport { GlobalProvider } from './context/GlobalState'\r\n\r\nimport { FieldsList } from './components/fieldsList'\r\nimport AddGroup from './components/forms/add-group'\r\nimport AddTaxonomy from './components/forms/add-taxonomy'\r\nimport AddMetaData from './components/forms/add-metadata'\r\nimport AddProductTitle from './components/forms/add-product-title'\r\n\r\nimport './css/app.css'\r\nimport './css/card.css'\r\nimport './css/draggable-list.css'\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    function App () {\r\n    \r\n        const taxonomies = document.getElementById('taxonomies') ? JSON.parse(document.getElementById('taxonomies').value) : []\r\n        const metaFields = document.getElementById('metaFields') ? JSON.parse(document.getElementById('metaFields').value) : []\r\n        \r\n        let [fieldType, setFieldType] = useState('taxonomy')\r\n        \r\n        function handleOnClick(e){\r\n            if (e.target.value == 'Cancel') setFieldType('taxonomy')\r\n            showHideAdd()\r\n        }\r\n        \r\n        return <>\r\n            <GlobalProvider>\r\n\r\n                <div className=\"metaxonomy__draggable-list\">\r\n                    <h3 className=\"MT_header\">Search Filters List</h3>\r\n                    <FieldsList taxonomies={ taxonomies } metaFields={ metaFields }/>\r\n                </div>\r\n\r\n                <div class=\"add-new-metaxonomy-placeholder metaxonomy__container\">\r\n                    { fieldType == 'taxonomy' ? <AddTaxonomy taxonomies={ taxonomies } onSubmit={ showHideAdd } /> : \r\n                      fieldType == 'meta' ? <AddMetaData metaFields={metaFields} onSubmit={ showHideAdd } />  : \r\n                      fieldType == 'product_title' ? <AddProductTitle onSubmit={ showHideAdd } /> :\r\n                      <AddGroup onSubmit={ showHideAdd } /> }\r\n                </div>\r\n\r\n                <select id=\"metaxonomyFieldType\" className=\"metaxonomy__select-field\" value={ fieldType } onChange={ e =>  setFieldType( e.target?.value ) }>\r\n                    <option value=\"taxonomy\">Taxonomy</option>\r\n                    <option value=\"meta\">MetaData</option>\r\n                    <option value=\"product_title\">Product Title</option>\r\n                    <option value=\"group\">Group</option>\r\n                </select>\r\n\r\n                <div className=\"metaxonomy__addnew-button\">\r\n                    <input type=\"button\" value=\"Add New\" id=\"metaxonomyAddNew\" onClick={ handleOnClick } />\r\n                </div>\r\n\r\n                <input name=\"fieldsList\" id=\"fieldsListInput\" type=\"text\" hidden value=\"nothing\"/>\r\n\r\n            </GlobalProvider>\r\n        </>\r\n    }\r\n\r\n    if(document.getElementById('wdmp_search_filters_root')) ReactDOM.render(<App />, document.getElementById('wdmp_search_filters_root'))\r\n    \r\n    const metaxonomySelect = document.querySelector('.metaxonomy__select-field')\r\n    const addplaceholder = document.querySelector('.add-new-metaxonomy-placeholder')\r\n    const metaxonomyAddNew = document.querySelector('#metaxonomyAddNew')\r\n\r\n    if(addplaceholder) addplaceholder.style.display = 'none'\r\n    if(metaxonomySelect) metaxonomySelect.style.display = 'block'\r\n\r\n    function showHideAdd() {\r\n        \r\n        addplaceholder.style.display = addplaceholder.style.display == 'none' ? 'block' : 'none'\r\n        metaxonomySelect.style.display = metaxonomySelect.style.display == 'none' ? 'block' : 'none'\r\n        metaxonomyAddNew.value = metaxonomyAddNew.value == 'Add New' ? 'Cancel' : 'Add New'\r\n\r\n        // empty form fields\r\n        document.querySelectorAll('.new-field-container').forEach(element => {\r\n\r\n            element.querySelectorAll('input[type=text]').forEach( element => { element.value = '' } )\r\n            element.querySelectorAll('select').forEach( element => { element.selectedIndex = 0 } )\r\n            \r\n            // element.querySelectorAll('input[type=checkbox]').forEach(element => { element.checked = false })\r\n            // if( element.querySelector('textarea') ) element.querySelector('textarea').value = ''\r\n        })\r\n\r\n    }\r\n})\r\n"],"names":["React","useRef","useGlobalContext","useUpdateContext","EditGroup","EditTanonomy","EditMeta","FieldsList","props","dragFieldIndex","fields","toggleForm","switchFields","getGroupIndex","handleDragStart","document","querySelectorAll","forEach","card","classList","contains","querySelector","textContent","target","handleDragEnter","index","current","cardHead","style","backgroundColor","handleDragEnd","e","parentGroupCard","parentElement","currentCard","params","fromGrpIndex","fromGrp","toGrp","fromFieldId","fromFieldIndex","toFieldIndex","alert","length","map","field","id","type","metaFields","taxonomies","useState","AddGroup","addField","getMaxId","getLastOrder","dataState","setDataState","handleInputChange","name","value","description","addNewField","preventDefault","onSubmit","bind","useEffect","AddMetaData","key","replace","handleChange","displayType","metaField","AddProductTitle","keyType","AddTaxonomy","taxonomy","grpIndex","editField","setGroupIndex","dragField","filter","group","groupFields","grpId","groupId","appReducer","state","action","JSON","parse","stringify","payload","updatedField","updatedFields","fieldId","slice","newState","dragedField","fromGroup","toGroup","console","log","dragedGroupField","splice","GroupFields","order","toString","switched","fromGroupFields","toGroupFields","createContext","useContext","useReducer","initialState","interval","setInterval","getElementById","searchfileds","GlobalContext","UpdateContext","GlobalProvider","children","dispatch","groupIndex","removeField","ids","push","isNaN","Math","max","apply","form","iconClass","innerText","display","add","remove","toggle","clearInterval","addEventListener","App","fieldType","setFieldType","handleOnClick","showHideAdd","ReactDOM","render","metaxonomySelect","addplaceholder","metaxonomyAddNew","element","selectedIndex"],"sourceRoot":""}